# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ContainerScansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_container_scan(self, id, **kwargs):  # noqa: E501
        """Delete Container Scan  # noqa: E501

        Delete a Container Scan by specifying the `ID`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_container_scan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_container_scan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_container_scan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_container_scan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete Container Scan  # noqa: E501

        Delete a Container Scan by specifying the `ID`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_container_scan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_container_scan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_container_scan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/container-scans/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_scan_anomalies(self, id, **kwargs):  # noqa: E501
        """Get Container Scan Anomalies  # noqa: E501

        Returns a list of detailed Anomalies of a Container Scan. Supply the unique Container Scan ID and the anomalies values will be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_scan_anomalies(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int page:
        :param int size:
        :return: PageAnomaly_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_scan_anomalies_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_scan_anomalies_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_container_scan_anomalies_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Container Scan Anomalies  # noqa: E501

        Returns a list of detailed Anomalies of a Container Scan. Supply the unique Container Scan ID and the anomalies values will be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_scan_anomalies_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int page:
        :param int size:
        :return: PageAnomaly_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_scan_anomalies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_container_scan_anomalies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/container-scans/{id}/anomalies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageAnomaly_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_scan_by_id(self, id, **kwargs):  # noqa: E501
        """Get Container Scan By Id  # noqa: E501

        Retrieves the details of the Container Scan. Supply the unique Container Scan `ID` and the container scan values will be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_scan_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: GetContainerScan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_scan_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_scan_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_container_scan_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Container Scan By Id  # noqa: E501

        Retrieves the details of the Container Scan. Supply the unique Container Scan `ID` and the container scan values will be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_scan_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: GetContainerScan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_scan_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_container_scan_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/container-scans/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetContainerScan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_scans(self, **kwargs):  # noqa: E501
        """Get Container Scans  # noqa: E501

        Returns a list of your Container Scans by setting the values of the parameters passed. Any parameters not provided will be left unchanged. The Container Scans are returned sorted by creation date,  with the most recently operation triggered appearing first  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_scans(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The `Container Scan` `ID` 
        :param int datastore: The `Datastore` `ID`
        :param int container: The `Container` `ID`
        :param bool latest_only: If it is the latest `Container Scan`
        :param date created_date: `Container Scan` `Created Date`
        :param str sort_created: The sorting type of the `Container Scan` list by `created date`
        :param int page:
        :param int size:
        :return: PageGetContainerScan_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_scans_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_container_scans_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_container_scans_with_http_info(self, **kwargs):  # noqa: E501
        """Get Container Scans  # noqa: E501

        Returns a list of your Container Scans by setting the values of the parameters passed. Any parameters not provided will be left unchanged. The Container Scans are returned sorted by creation date,  with the most recently operation triggered appearing first  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_scans_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The `Container Scan` `ID` 
        :param int datastore: The `Datastore` `ID`
        :param int container: The `Container` `ID`
        :param bool latest_only: If it is the latest `Container Scan`
        :param date created_date: `Container Scan` `Created Date`
        :param str sort_created: The sorting type of the `Container Scan` list by `created date`
        :param int page:
        :param int size:
        :return: PageGetContainerScan_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'datastore', 'container', 'latest_only', 'created_date', 'sort_created', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_scans" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'datastore' in params:
            query_params.append(('datastore', params['datastore']))  # noqa: E501
        if 'container' in params:
            query_params.append(('container', params['container']))  # noqa: E501
        if 'latest_only' in params:
            query_params.append(('latest_only', params['latest_only']))  # noqa: E501
        if 'created_date' in params:
            query_params.append(('created_date', params['created_date']))  # noqa: E501
        if 'sort_created' in params:
            query_params.append(('sort_created', params['sort_created']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/container-scans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageGetContainerScan_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
