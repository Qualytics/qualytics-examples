# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DatastoresApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_datastore(self, body, **kwargs):  # noqa: E501
        """Create Datastore  # noqa: E501

        Creates a new Datastore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datastore(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Datastore body: (required)
        :return: ResponseCreateDatastoreApiDatastoresPost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_datastore_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_datastore_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_datastore_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Datastore  # noqa: E501

        Creates a new Datastore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datastore_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Datastore body: (required)
        :return: ResponseCreateDatastoreApiDatastoresPost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_datastore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_datastore`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseCreateDatastoreApiDatastoresPost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_datastore_catalog(self, body, id, **kwargs):  # noqa: E501
        """Create Datastore Catalog  # noqa: E501

        Creates a new Datastore catalog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datastore_catalog(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Catalog body: (required)
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_datastore_catalog_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_datastore_catalog_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def create_datastore_catalog_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Create Datastore Catalog  # noqa: E501

        Creates a new Datastore catalog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datastore_catalog_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Catalog body: (required)
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_datastore_catalog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_datastore_catalog`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_datastore_catalog`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}/catalog', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_datastore(self, id, **kwargs):  # noqa: E501
        """Delete Datastore  # noqa: E501

        Delete the Datastore or Enrichment Datastore by specifying the `ID`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_datastore(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_datastore_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_datastore_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_datastore_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete Datastore  # noqa: E501

        Delete the Datastore or Enrichment Datastore by specifying the `ID`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_datastore_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_datastore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_datastore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_enrichment_datastore(self, id, **kwargs):  # noqa: E501
        """Delete Enrichment Datastore  # noqa: E501

        Delete an Enrichment Datastore of the Datastore by specifying the Datastore `ID`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enrichment_datastore(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_enrichment_datastore_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_enrichment_datastore_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_enrichment_datastore_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete Enrichment Datastore  # noqa: E501

        Delete an Enrichment Datastore of the Datastore by specifying the Datastore `ID`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enrichment_datastore_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_enrichment_datastore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_enrichment_datastore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}/enrichment', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datastore(self, id, **kwargs):  # noqa: E501
        """Get Datastore  # noqa: E501

        Retrieves the Datastore or Enrichment Datastore. Supply the unique Datastore or Enrichment Datastore `ID` and the Datastore or Enrichment Datastore will be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ResponseGetDatastoreApiDatastoresIdGet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datastore_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datastore_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_datastore_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Datastore  # noqa: E501

        Retrieves the Datastore or Enrichment Datastore. Supply the unique Datastore or Enrichment Datastore `ID` and the Datastore or Enrichment Datastore will be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ResponseGetDatastoreApiDatastoresIdGet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datastore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_datastore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseGetDatastoreApiDatastoresIdGet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datastore_actions(self, id, **kwargs):  # noqa: E501
        """Get Datastore Actions  # noqa: E501

        Retrieves Datastore Actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_actions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: GetDatastoreActions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datastore_actions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datastore_actions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_datastore_actions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Datastore Actions  # noqa: E501

        Retrieves Datastore Actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_actions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: GetDatastoreActions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datastore_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_datastore_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDatastoreActions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datastore_catalog(self, id, **kwargs):  # noqa: E501
        """Get Datastore Catalog  # noqa: E501

        Retrieves a list of the catalog details of the specific Datastore `ID` by setting the values of the parameters passed.  Any parameters not provided will be left unchanged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_catalog(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The `Datastore` Id (required)
        :param str name: The `Datastore` name
        :param str sort_name: The sorting type of the `Datastore` list by `name`
        :param str sort_created: The sorting type of the `Datastore` list by `created_date`
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datastore_catalog_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datastore_catalog_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_datastore_catalog_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Datastore Catalog  # noqa: E501

        Retrieves a list of the catalog details of the specific Datastore `ID` by setting the values of the parameters passed.  Any parameters not provided will be left unchanged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_catalog_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The `Datastore` Id (required)
        :param str name: The `Datastore` name
        :param str sort_name: The sorting type of the `Datastore` list by `name`
        :param str sort_created: The sorting type of the `Datastore` list by `created_date`
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'sort_name', 'sort_created']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datastore_catalog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_datastore_catalog`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'sort_name' in params:
            query_params.append(('sort_name', params['sort_name']))  # noqa: E501
        if 'sort_created' in params:
            query_params.append(('sort_created', params['sort_created']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}/catalog', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datastore_latest_operations(self, id, **kwargs):  # noqa: E501
        """Get Datastore Latest Operations  # noqa: E501

        Retrieves the latest operation of the Datastore. Supply the unique Datastore `ID` and the Datastore will be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_latest_operations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The `Operation` `Id` (required)
        :return: GetDatastoreLatestOperations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datastore_latest_operations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datastore_latest_operations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_datastore_latest_operations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Datastore Latest Operations  # noqa: E501

        Retrieves the latest operation of the Datastore. Supply the unique Datastore `ID` and the Datastore will be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_latest_operations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The `Operation` `Id` (required)
        :return: GetDatastoreLatestOperations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datastore_latest_operations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_datastore_latest_operations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}/operations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDatastoreLatestOperations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datastore_listing(self, **kwargs):  # noqa: E501
        """Get Datastore Listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_listing(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enrich_only:
        :return: list[DatastoreStub]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datastore_listing_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_datastore_listing_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_datastore_listing_with_http_info(self, **kwargs):  # noqa: E501
        """Get Datastore Listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_listing_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool enrich_only:
        :return: list[DatastoreStub]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrich_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datastore_listing" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enrich_only' in params:
            query_params.append(('enrich_only', params['enrich_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/listing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DatastoreStub]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datastore_specifications(self, **kwargs):  # noqa: E501
        """Get Datastore Specifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_specifications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool implemented: If the `Datastore` or `Enrichment Datastore` is already implemented
        :param bool supports_enrichment: If the specified `Datastore` supports an `Enrichment Datastore`
        :return: list[GetDatastoreSpec]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datastore_specifications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_datastore_specifications_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_datastore_specifications_with_http_info(self, **kwargs):  # noqa: E501
        """Get Datastore Specifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_specifications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool implemented: If the `Datastore` or `Enrichment Datastore` is already implemented
        :param bool supports_enrichment: If the specified `Datastore` supports an `Enrichment Datastore`
        :return: list[GetDatastoreSpec]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['implemented', 'supports_enrichment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datastore_specifications" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'implemented' in params:
            query_params.append(('implemented', params['implemented']))  # noqa: E501
        if 'supports_enrichment' in params:
            query_params.append(('supports_enrichment', params['supports_enrichment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/specifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetDatastoreSpec]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datastore_specifications_by_type(self, type, **kwargs):  # noqa: E501
        """Get Datastore Specifications By Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_specifications_by_type(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The Store Type of `Datastore` or `Enrichment Datastore` (required)
        :return: GetDatastoreSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datastore_specifications_by_type_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datastore_specifications_by_type_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def get_datastore_specifications_by_type_with_http_info(self, type, **kwargs):  # noqa: E501
        """Get Datastore Specifications By Type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastore_specifications_by_type_with_http_info(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The Store Type of `Datastore` or `Enrichment Datastore` (required)
        :return: GetDatastoreSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datastore_specifications_by_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_datastore_specifications_by_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/specifications/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDatastoreSpec',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datastores(self, **kwargs):  # noqa: E501
        """Get Datastores  # noqa: E501

        Returns the list of your Datastores or Enrichment Datastores by setting the values of the parameters passed.  Any parameters not provided will be left unchanged. For Enrichment Datastore only the `enrich_only` needs to set to True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastores(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The `Datastore` or `Enrichment Datastore` `Name`
        :param bool sort_favorite: The sorting type of the `Datastore` or `Enrichment Datastore` list by `favorite`
        :param str sort_created: The sorting type of the `Datastore` or `Enrichment Datastore` list by `created_date`
        :param str sort_name: The sorting type of the `Datastore` or `Enrichment Datastore` list by `name`
        :param list[str] tag: The name of the `Tag`
        :param bool enrich_only: If it is a `Datastore(false)` or `Enrichment Datastore(true)`
        :param int page:
        :param int size:
        :return: PageUnionGetJdbcDatastoreGetDfsDatastoreGetQfsDatastore_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datastores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_datastores_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_datastores_with_http_info(self, **kwargs):  # noqa: E501
        """Get Datastores  # noqa: E501

        Returns the list of your Datastores or Enrichment Datastores by setting the values of the parameters passed.  Any parameters not provided will be left unchanged. For Enrichment Datastore only the `enrich_only` needs to set to True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datastores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The `Datastore` or `Enrichment Datastore` `Name`
        :param bool sort_favorite: The sorting type of the `Datastore` or `Enrichment Datastore` list by `favorite`
        :param str sort_created: The sorting type of the `Datastore` or `Enrichment Datastore` list by `created_date`
        :param str sort_name: The sorting type of the `Datastore` or `Enrichment Datastore` list by `name`
        :param list[str] tag: The name of the `Tag`
        :param bool enrich_only: If it is a `Datastore(false)` or `Enrichment Datastore(true)`
        :param int page:
        :param int size:
        :return: PageUnionGetJdbcDatastoreGetDfsDatastoreGetQfsDatastore_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sort_favorite', 'sort_created', 'sort_name', 'tag', 'enrich_only', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datastores" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'sort_favorite' in params:
            query_params.append(('sort_favorite', params['sort_favorite']))  # noqa: E501
        if 'sort_created' in params:
            query_params.append(('sort_created', params['sort_created']))  # noqa: E501
        if 'sort_name' in params:
            query_params.append(('sort_name', params['sort_name']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'multi'  # noqa: E501
        if 'enrich_only' in params:
            query_params.append(('enrich_only', params['enrich_only']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageUnionGetJdbcDatastoreGetDfsDatastoreGetQfsDatastore_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_datastore(self, body, id, **kwargs):  # noqa: E501
        """Update Datastore  # noqa: E501

        Updates the specific Datastore by setting the values of the parameters passed.  Any parameters not provided will be left unchanged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_datastore(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Datastore1 body: (required)
        :param int id: (required)
        :return: ResponseUpdateDatastoreApiDatastoresIdPut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_datastore_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_datastore_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_datastore_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update Datastore  # noqa: E501

        Updates the specific Datastore by setting the values of the parameters passed.  Any parameters not provided will be left unchanged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_datastore_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Datastore1 body: (required)
        :param int id: (required)
        :return: ResponseUpdateDatastoreApiDatastoresIdPut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_datastore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_datastore`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_datastore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseUpdateDatastoreApiDatastoresIdPut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_enrichment_datastore(self, datastore_id, enrich_store_id, **kwargs):  # noqa: E501
        """Update Enrichment Datastore  # noqa: E501

        Updates the specific Datastore by setting the Enrichment Datastore `ID`.  Any parameters not provided will be left unchanged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_enrichment_datastore(datastore_id, enrich_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int datastore_id: The Datastore `ID` (required)
        :param int enrich_store_id: The Enrichment Datastore `ID` (required)
        :return: ResponseUpdateEnrichmentDatastoreApiDatastoresDatastoreIdEnrichmentEnrichStoreIdPatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_enrichment_datastore_with_http_info(datastore_id, enrich_store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_enrichment_datastore_with_http_info(datastore_id, enrich_store_id, **kwargs)  # noqa: E501
            return data

    def update_enrichment_datastore_with_http_info(self, datastore_id, enrich_store_id, **kwargs):  # noqa: E501
        """Update Enrichment Datastore  # noqa: E501

        Updates the specific Datastore by setting the Enrichment Datastore `ID`.  Any parameters not provided will be left unchanged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_enrichment_datastore_with_http_info(datastore_id, enrich_store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int datastore_id: The Datastore `ID` (required)
        :param int enrich_store_id: The Enrichment Datastore `ID` (required)
        :return: ResponseUpdateEnrichmentDatastoreApiDatastoresDatastoreIdEnrichmentEnrichStoreIdPatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datastore_id', 'enrich_store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_enrichment_datastore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datastore_id' is set
        if ('datastore_id' not in params or
                params['datastore_id'] is None):
            raise ValueError("Missing the required parameter `datastore_id` when calling `update_enrichment_datastore`")  # noqa: E501
        # verify the required parameter 'enrich_store_id' is set
        if ('enrich_store_id' not in params or
                params['enrich_store_id'] is None):
            raise ValueError("Missing the required parameter `enrich_store_id` when calling `update_enrichment_datastore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datastore_id' in params:
            path_params['datastore_id'] = params['datastore_id']  # noqa: E501
        if 'enrich_store_id' in params:
            path_params['enrich_store_id'] = params['enrich_store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{datastore_id}/enrichment/{enrich_store_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseUpdateEnrichmentDatastoreApiDatastoresDatastoreIdEnrichmentEnrichStoreIdPatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_favorite_datastore(self, body, id, **kwargs):  # noqa: E501
        """Update Favorite Datastore  # noqa: E501

        Updates the specific Datastore by setting the favorite boolean value of the parameter passed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_favorite_datastore(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ToggleFavorite body: (required)
        :param int id: (required)
        :return: ResponseUpdateFavoriteDatastoreApiDatastoresIdFavoritePatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_favorite_datastore_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_favorite_datastore_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_favorite_datastore_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update Favorite Datastore  # noqa: E501

        Updates the specific Datastore by setting the favorite boolean value of the parameter passed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_favorite_datastore_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ToggleFavorite body: (required)
        :param int id: (required)
        :return: ResponseUpdateFavoriteDatastoreApiDatastoresIdFavoritePatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_favorite_datastore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_favorite_datastore`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_favorite_datastore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}/favorite', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseUpdateFavoriteDatastoreApiDatastoresIdFavoritePatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_datastore_connection(self, id, **kwargs):  # noqa: E501
        """Verify Datastore Connection  # noqa: E501

        Should respond `connected: true` if the datastore is able to achieve it's intended purpose, otherwise `connected: false, message: detail` - a datastore should be able to read - an enrichment store should be able to read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_datastore_connection(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: GetDatastoreStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_datastore_connection_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_datastore_connection_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def verify_datastore_connection_with_http_info(self, id, **kwargs):  # noqa: E501
        """Verify Datastore Connection  # noqa: E501

        Should respond `connected: true` if the datastore is able to achieve it's intended purpose, otherwise `connected: false, message: detail` - a datastore should be able to read - an enrichment store should be able to read and write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_datastore_connection_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: GetDatastoreStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_datastore_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `verify_datastore_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/{id}/connection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDatastoreStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_new_datastore_connection(self, body, **kwargs):  # noqa: E501
        """Verify New Datastore Connection  # noqa: E501

        Validate the connection for a datastore or enrichment datastore. Returns a 204 status code if the connection is valid, or a 400 status code along with an error message if the connection is invalid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_new_datastore_connection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Datastore2 body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_new_datastore_connection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_new_datastore_connection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def verify_new_datastore_connection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Verify New Datastore Connection  # noqa: E501

        Validate the connection for a datastore or enrichment datastore. Returns a 204 status code if the connection is valid, or a 400 status code along with an error message if the connection is invalid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_new_datastore_connection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Datastore2 body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_new_datastore_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `verify_new_datastore_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/datastores/connection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
