# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class HubApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bootstrap(self, **kwargs):  # noqa: E501
        """Bootstrap  # noqa: E501

        This endpoint should be invoked at the initiation of every user session to ensure that a properly  registered user account is provisioned and available for subsequent requests/interactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bootstrap(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Bootstrap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bootstrap_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bootstrap_with_http_info(**kwargs)  # noqa: E501
            return data

    def bootstrap_with_http_info(self, **kwargs):  # noqa: E501
        """Bootstrap  # noqa: E501

        This endpoint should be invoked at the initiation of every user session to ensure that a properly  registered user account is provisioned and available for subsequent requests/interactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bootstrap_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Bootstrap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bootstrap" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/bootstrap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bootstrap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hub(self, **kwargs):  # noqa: E501
        """Hub  # noqa: E501

        Returns a short description of this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hub(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Hub
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hub_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.hub_with_http_info(**kwargs)  # noqa: E501
            return data

    def hub_with_http_info(self, **kwargs):  # noqa: E501
        """Hub  # noqa: E501

        Returns a short description of this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hub_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Hub
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hub" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Hub',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insights(self, **kwargs):  # noqa: E501
        """Insights  # noqa: E501

        Insight for all activity of the deployment for the specified timeframe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date report_date:
        :return: GetInsights
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insights_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.insights_with_http_info(**kwargs)  # noqa: E501
            return data

    def insights_with_http_info(self, **kwargs):  # noqa: E501
        """Insights  # noqa: E501

        Insight for all activity of the deployment for the specified timeframe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date report_date:
        :return: GetInsights
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insights" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'report_date' in params:
            query_params.append(('report_date', params['report_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/insights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInsights',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics(self, timeframe, **kwargs):  # noqa: E501
        """Metrics  # noqa: E501

        Summary metrics for all activity of the deployment for the specified timeframe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics(timeframe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timeframe: (required)
        :param int datastore:
        :param list[int] container:
        :param list[str] field:
        :param list[RuleType] rule_type:
        :param list[AnomalyStatusType] status:
        :param str anomaly_type:
        :return: HubMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_with_http_info(timeframe, **kwargs)  # noqa: E501
        else:
            (data) = self.metrics_with_http_info(timeframe, **kwargs)  # noqa: E501
            return data

    def metrics_with_http_info(self, timeframe, **kwargs):  # noqa: E501
        """Metrics  # noqa: E501

        Summary metrics for all activity of the deployment for the specified timeframe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_with_http_info(timeframe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timeframe: (required)
        :param int datastore:
        :param list[int] container:
        :param list[str] field:
        :param list[RuleType] rule_type:
        :param list[AnomalyStatusType] status:
        :param str anomaly_type:
        :return: HubMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timeframe', 'datastore', 'container', 'field', 'rule_type', 'status', 'anomaly_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timeframe' is set
        if ('timeframe' not in params or
                params['timeframe'] is None):
            raise ValueError("Missing the required parameter `timeframe` when calling `metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'timeframe' in params:
            query_params.append(('timeframe', params['timeframe']))  # noqa: E501
        if 'datastore' in params:
            query_params.append(('datastore', params['datastore']))  # noqa: E501
        if 'container' in params:
            query_params.append(('container', params['container']))  # noqa: E501
            collection_formats['container'] = 'multi'  # noqa: E501
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
            collection_formats['field'] = 'multi'  # noqa: E501
        if 'rule_type' in params:
            query_params.append(('rule_type', params['rule_type']))  # noqa: E501
            collection_formats['rule_type'] = 'multi'  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'multi'  # noqa: E501
        if 'anomaly_type' in params:
            query_params.append(('anomaly_type', params['anomaly_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HubMetrics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scan_metrics(self, datastore, start_date, end_date, **kwargs):  # noqa: E501
        """Scan Metrics  # noqa: E501

        Summary metrics for container scans per datastore and date range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scan_metrics(datastore, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int datastore: (required)
        :param date start_date: (required)
        :param date end_date: (required)
        :return: ScanMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scan_metrics_with_http_info(datastore, start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.scan_metrics_with_http_info(datastore, start_date, end_date, **kwargs)  # noqa: E501
            return data

    def scan_metrics_with_http_info(self, datastore, start_date, end_date, **kwargs):  # noqa: E501
        """Scan Metrics  # noqa: E501

        Summary metrics for container scans per datastore and date range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scan_metrics_with_http_info(datastore, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int datastore: (required)
        :param date start_date: (required)
        :param date end_date: (required)
        :return: ScanMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datastore', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scan_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datastore' is set
        if ('datastore' not in params or
                params['datastore'] is None):
            raise ValueError("Missing the required parameter `datastore` when calling `scan_metrics`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `scan_metrics`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `scan_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datastore' in params:
            query_params.append(('datastore', params['datastore']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/scan-metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScanMetrics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status(self, **kwargs):  # noqa: E501
        """Status  # noqa: E501

        Health check endpoint that verifies Hub can communicate with its backend database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.status_with_http_info(**kwargs)  # noqa: E501
            return data

    def status_with_http_info(self, **kwargs):  # noqa: E501
        """Status  # noqa: E501

        Health check endpoint that verifies Hub can communicate with its backend database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Auth0HTTPBearer', 'Auth0ImplicitBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
