# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContainerStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_profiled': 'datetime',
        'last_scanned': 'datetime',
        'fields': 'int',
        'records': 'int',
        'checks': 'int',
        'anomalies': 'int'
    }

    attribute_map = {
        'last_profiled': 'last_profiled',
        'last_scanned': 'last_scanned',
        'fields': 'fields',
        'records': 'records',
        'checks': 'checks',
        'anomalies': 'anomalies'
    }

    def __init__(self, last_profiled=None, last_scanned=None, fields=None, records=None, checks=None, anomalies=None):  # noqa: E501
        """ContainerStatus - a model defined in Swagger"""  # noqa: E501
        self._last_profiled = None
        self._last_scanned = None
        self._fields = None
        self._records = None
        self._checks = None
        self._anomalies = None
        self.discriminator = None
        if last_profiled is not None:
            self.last_profiled = last_profiled
        if last_scanned is not None:
            self.last_scanned = last_scanned
        self.fields = fields
        self.records = records
        self.checks = checks
        self.anomalies = anomalies

    @property
    def last_profiled(self):
        """Gets the last_profiled of this ContainerStatus.  # noqa: E501


        :return: The last_profiled of this ContainerStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_profiled

    @last_profiled.setter
    def last_profiled(self, last_profiled):
        """Sets the last_profiled of this ContainerStatus.


        :param last_profiled: The last_profiled of this ContainerStatus.  # noqa: E501
        :type: datetime
        """

        self._last_profiled = last_profiled

    @property
    def last_scanned(self):
        """Gets the last_scanned of this ContainerStatus.  # noqa: E501


        :return: The last_scanned of this ContainerStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_scanned

    @last_scanned.setter
    def last_scanned(self, last_scanned):
        """Sets the last_scanned of this ContainerStatus.


        :param last_scanned: The last_scanned of this ContainerStatus.  # noqa: E501
        :type: datetime
        """

        self._last_scanned = last_scanned

    @property
    def fields(self):
        """Gets the fields of this ContainerStatus.  # noqa: E501


        :return: The fields of this ContainerStatus.  # noqa: E501
        :rtype: int
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ContainerStatus.


        :param fields: The fields of this ContainerStatus.  # noqa: E501
        :type: int
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    @property
    def records(self):
        """Gets the records of this ContainerStatus.  # noqa: E501


        :return: The records of this ContainerStatus.  # noqa: E501
        :rtype: int
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this ContainerStatus.


        :param records: The records of this ContainerStatus.  # noqa: E501
        :type: int
        """
        if records is None:
            raise ValueError("Invalid value for `records`, must not be `None`")  # noqa: E501

        self._records = records

    @property
    def checks(self):
        """Gets the checks of this ContainerStatus.  # noqa: E501


        :return: The checks of this ContainerStatus.  # noqa: E501
        :rtype: int
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this ContainerStatus.


        :param checks: The checks of this ContainerStatus.  # noqa: E501
        :type: int
        """
        if checks is None:
            raise ValueError("Invalid value for `checks`, must not be `None`")  # noqa: E501

        self._checks = checks

    @property
    def anomalies(self):
        """Gets the anomalies of this ContainerStatus.  # noqa: E501


        :return: The anomalies of this ContainerStatus.  # noqa: E501
        :rtype: int
        """
        return self._anomalies

    @anomalies.setter
    def anomalies(self, anomalies):
        """Sets the anomalies of this ContainerStatus.


        :param anomalies: The anomalies of this ContainerStatus.  # noqa: E501
        :type: int
        """
        if anomalies is None:
            raise ValueError("Invalid value for `anomalies`, must not be `None`")  # noqa: E501

        self._anomalies = anomalies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
