# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateFileContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_type': 'str',
        'name': 'str',
        'field_names': 'list[str]',
        'relative_path': 'str',
        'file_name': 'str',
        'extension': 'str',
        'format': 'str',
        'has_header': 'bool',
        'line_identifier_field': 'str',
        'last_modified': 'datetime'
    }

    attribute_map = {
        'store_type': 'store_type',
        'name': 'name',
        'field_names': 'field_names',
        'relative_path': 'relative_path',
        'file_name': 'file_name',
        'extension': 'extension',
        'format': 'format',
        'has_header': 'has_header',
        'line_identifier_field': 'line_identifier_field',
        'last_modified': 'last_modified'
    }

    def __init__(self, store_type='file', name=None, field_names=None, relative_path=None, file_name=None, extension=None, format=None, has_header=True, line_identifier_field=None, last_modified=None):  # noqa: E501
        """CreateFileContainer - a model defined in Swagger"""  # noqa: E501
        self._store_type = None
        self._name = None
        self._field_names = None
        self._relative_path = None
        self._file_name = None
        self._extension = None
        self._format = None
        self._has_header = None
        self._line_identifier_field = None
        self._last_modified = None
        self.discriminator = None
        if store_type is not None:
            self.store_type = store_type
        self.name = name
        if field_names is not None:
            self.field_names = field_names
        self.relative_path = relative_path
        self.file_name = file_name
        self.extension = extension
        if format is not None:
            self.format = format
        if has_header is not None:
            self.has_header = has_header
        if line_identifier_field is not None:
            self.line_identifier_field = line_identifier_field
        self.last_modified = last_modified

    @property
    def store_type(self):
        """Gets the store_type of this CreateFileContainer.  # noqa: E501


        :return: The store_type of this CreateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type):
        """Sets the store_type of this CreateFileContainer.


        :param store_type: The store_type of this CreateFileContainer.  # noqa: E501
        :type: str
        """
        allowed_values = ["file"]  # noqa: E501
        if store_type not in allowed_values:
            raise ValueError(
                "Invalid value for `store_type` ({0}), must be one of {1}"  # noqa: E501
                .format(store_type, allowed_values)
            )

        self._store_type = store_type

    @property
    def name(self):
        """Gets the name of this CreateFileContainer.  # noqa: E501


        :return: The name of this CreateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFileContainer.


        :param name: The name of this CreateFileContainer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def field_names(self):
        """Gets the field_names of this CreateFileContainer.  # noqa: E501


        :return: The field_names of this CreateFileContainer.  # noqa: E501
        :rtype: list[str]
        """
        return self._field_names

    @field_names.setter
    def field_names(self, field_names):
        """Sets the field_names of this CreateFileContainer.


        :param field_names: The field_names of this CreateFileContainer.  # noqa: E501
        :type: list[str]
        """

        self._field_names = field_names

    @property
    def relative_path(self):
        """Gets the relative_path of this CreateFileContainer.  # noqa: E501


        :return: The relative_path of this CreateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this CreateFileContainer.


        :param relative_path: The relative_path of this CreateFileContainer.  # noqa: E501
        :type: str
        """
        if relative_path is None:
            raise ValueError("Invalid value for `relative_path`, must not be `None`")  # noqa: E501

        self._relative_path = relative_path

    @property
    def file_name(self):
        """Gets the file_name of this CreateFileContainer.  # noqa: E501


        :return: The file_name of this CreateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this CreateFileContainer.


        :param file_name: The file_name of this CreateFileContainer.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def extension(self):
        """Gets the extension of this CreateFileContainer.  # noqa: E501


        :return: The extension of this CreateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this CreateFileContainer.


        :param extension: The extension of this CreateFileContainer.  # noqa: E501
        :type: str
        """
        if extension is None:
            raise ValueError("Invalid value for `extension`, must not be `None`")  # noqa: E501

        self._extension = extension

    @property
    def format(self):
        """Gets the format of this CreateFileContainer.  # noqa: E501


        :return: The format of this CreateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateFileContainer.


        :param format: The format of this CreateFileContainer.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def has_header(self):
        """Gets the has_header of this CreateFileContainer.  # noqa: E501


        :return: The has_header of this CreateFileContainer.  # noqa: E501
        :rtype: bool
        """
        return self._has_header

    @has_header.setter
    def has_header(self, has_header):
        """Sets the has_header of this CreateFileContainer.


        :param has_header: The has_header of this CreateFileContainer.  # noqa: E501
        :type: bool
        """

        self._has_header = has_header

    @property
    def line_identifier_field(self):
        """Gets the line_identifier_field of this CreateFileContainer.  # noqa: E501


        :return: The line_identifier_field of this CreateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._line_identifier_field

    @line_identifier_field.setter
    def line_identifier_field(self, line_identifier_field):
        """Sets the line_identifier_field of this CreateFileContainer.


        :param line_identifier_field: The line_identifier_field of this CreateFileContainer.  # noqa: E501
        :type: str
        """

        self._line_identifier_field = line_identifier_field

    @property
    def last_modified(self):
        """Gets the last_modified of this CreateFileContainer.  # noqa: E501


        :return: The last_modified of this CreateFileContainer.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this CreateFileContainer.


        :param last_modified: The last_modified of this CreateFileContainer.  # noqa: E501
        :type: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateFileContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFileContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
