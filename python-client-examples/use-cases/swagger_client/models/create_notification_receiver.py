# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateNotificationReceiver(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'AllOfCreateNotificationReceiverType',
        'parameters': 'object',
        'secret': 'str',
        'auth_type': 'str'
    }

    attribute_map = {
        'type': 'type',
        'parameters': 'parameters',
        'secret': 'secret',
        'auth_type': 'auth_type'
    }

    def __init__(self, type=None, parameters=None, secret=None, auth_type=None):  # noqa: E501
        """CreateNotificationReceiver - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._parameters = None
        self._secret = None
        self._auth_type = None
        self.discriminator = None
        self.type = type
        self.parameters = parameters
        if secret is not None:
            self.secret = secret
        if auth_type is not None:
            self.auth_type = auth_type

    @property
    def type(self):
        """Gets the type of this CreateNotificationReceiver.  # noqa: E501

        Notification receiver type  # noqa: E501

        :return: The type of this CreateNotificationReceiver.  # noqa: E501
        :rtype: AllOfCreateNotificationReceiverType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateNotificationReceiver.

        Notification receiver type  # noqa: E501

        :param type: The type of this CreateNotificationReceiver.  # noqa: E501
        :type: AllOfCreateNotificationReceiverType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def parameters(self):
        """Gets the parameters of this CreateNotificationReceiver.  # noqa: E501

        Description of the receiver  # noqa: E501

        :return: The parameters of this CreateNotificationReceiver.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CreateNotificationReceiver.

        Description of the receiver  # noqa: E501

        :param parameters: The parameters of this CreateNotificationReceiver.  # noqa: E501
        :type: object
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def secret(self):
        """Gets the secret of this CreateNotificationReceiver.  # noqa: E501

        Secret of notification receiver  # noqa: E501

        :return: The secret of this CreateNotificationReceiver.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this CreateNotificationReceiver.

        Secret of notification receiver  # noqa: E501

        :param secret: The secret of this CreateNotificationReceiver.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def auth_type(self):
        """Gets the auth_type of this CreateNotificationReceiver.  # noqa: E501

        Authorization type of notification receiver  # noqa: E501

        :return: The auth_type of this CreateNotificationReceiver.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this CreateNotificationReceiver.

        Authorization type of notification receiver  # noqa: E501

        :param auth_type: The auth_type of this CreateNotificationReceiver.  # noqa: E501
        :type: str
        """
        allowed_values = ["basic", "digest", "bearer"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateNotificationReceiver, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateNotificationReceiver):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
