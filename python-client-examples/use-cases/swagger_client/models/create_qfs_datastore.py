# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateQfsDatastore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'enrich_only': 'bool',
        'enrich_container_prefix': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'enrich_only': 'enrich_only',
        'enrich_container_prefix': 'enrich_container_prefix',
        'tags': 'tags'
    }

    def __init__(self, type=None, name=None, enrich_only=False, enrich_container_prefix=None, tags=None):  # noqa: E501
        """CreateQfsDatastore - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._enrich_only = None
        self._enrich_container_prefix = None
        self._tags = None
        self.discriminator = None
        self.type = type
        self.name = name
        if enrich_only is not None:
            self.enrich_only = enrich_only
        if enrich_container_prefix is not None:
            self.enrich_container_prefix = enrich_container_prefix
        if tags is not None:
            self.tags = tags

    @property
    def type(self):
        """Gets the type of this CreateQfsDatastore.  # noqa: E501

        Type of QFS `Datastore`  # noqa: E501

        :return: The type of this CreateQfsDatastore.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateQfsDatastore.

        Type of QFS `Datastore`  # noqa: E501

        :param type: The type of this CreateQfsDatastore.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["qfs"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this CreateQfsDatastore.  # noqa: E501

        Datastore name  # noqa: E501

        :return: The name of this CreateQfsDatastore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateQfsDatastore.

        Datastore name  # noqa: E501

        :param name: The name of this CreateQfsDatastore.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def enrich_only(self):
        """Gets the enrich_only of this CreateQfsDatastore.  # noqa: E501

        Enrichment Datastore (`true`) or Datastore(`false)  # noqa: E501

        :return: The enrich_only of this CreateQfsDatastore.  # noqa: E501
        :rtype: bool
        """
        return self._enrich_only

    @enrich_only.setter
    def enrich_only(self, enrich_only):
        """Sets the enrich_only of this CreateQfsDatastore.

        Enrichment Datastore (`true`) or Datastore(`false)  # noqa: E501

        :param enrich_only: The enrich_only of this CreateQfsDatastore.  # noqa: E501
        :type: bool
        """

        self._enrich_only = enrich_only

    @property
    def enrich_container_prefix(self):
        """Gets the enrich_container_prefix of this CreateQfsDatastore.  # noqa: E501

        Enrichment prefix name  # noqa: E501

        :return: The enrich_container_prefix of this CreateQfsDatastore.  # noqa: E501
        :rtype: str
        """
        return self._enrich_container_prefix

    @enrich_container_prefix.setter
    def enrich_container_prefix(self, enrich_container_prefix):
        """Sets the enrich_container_prefix of this CreateQfsDatastore.

        Enrichment prefix name  # noqa: E501

        :param enrich_container_prefix: The enrich_container_prefix of this CreateQfsDatastore.  # noqa: E501
        :type: str
        """

        self._enrich_container_prefix = enrich_container_prefix

    @property
    def tags(self):
        """Gets the tags of this CreateQfsDatastore.  # noqa: E501

        Tags of the `Datastore`  # noqa: E501

        :return: The tags of this CreateQfsDatastore.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateQfsDatastore.

        Tags of the `Datastore`  # noqa: E501

        :param tags: The tags of this CreateQfsDatastore.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateQfsDatastore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateQfsDatastore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
