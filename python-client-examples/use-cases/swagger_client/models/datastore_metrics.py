# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatastoreMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'containers': 'int',
        'partitions': 'int',
        'records': 'int',
        'quality_checks': 'int',
        'anomalies': 'int',
        'new_anomalies': 'int',
        'open_anomalies': 'int',
        'archived_anomalies': 'int',
        'confidence_score': 'float'
    }

    attribute_map = {
        'containers': 'containers',
        'partitions': 'partitions',
        'records': 'records',
        'quality_checks': 'quality_checks',
        'anomalies': 'anomalies',
        'new_anomalies': 'new_anomalies',
        'open_anomalies': 'open_anomalies',
        'archived_anomalies': 'archived_anomalies',
        'confidence_score': 'confidence_score'
    }

    def __init__(self, containers=None, partitions=None, records=None, quality_checks=None, anomalies=None, new_anomalies=None, open_anomalies=None, archived_anomalies=None, confidence_score=None):  # noqa: E501
        """DatastoreMetrics - a model defined in Swagger"""  # noqa: E501
        self._containers = None
        self._partitions = None
        self._records = None
        self._quality_checks = None
        self._anomalies = None
        self._new_anomalies = None
        self._open_anomalies = None
        self._archived_anomalies = None
        self._confidence_score = None
        self.discriminator = None
        self.containers = containers
        self.partitions = partitions
        self.records = records
        self.quality_checks = quality_checks
        self.anomalies = anomalies
        self.new_anomalies = new_anomalies
        self.open_anomalies = open_anomalies
        self.archived_anomalies = archived_anomalies
        if confidence_score is not None:
            self.confidence_score = confidence_score

    @property
    def containers(self):
        """Gets the containers of this DatastoreMetrics.  # noqa: E501


        :return: The containers of this DatastoreMetrics.  # noqa: E501
        :rtype: int
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this DatastoreMetrics.


        :param containers: The containers of this DatastoreMetrics.  # noqa: E501
        :type: int
        """
        if containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")  # noqa: E501

        self._containers = containers

    @property
    def partitions(self):
        """Gets the partitions of this DatastoreMetrics.  # noqa: E501


        :return: The partitions of this DatastoreMetrics.  # noqa: E501
        :rtype: int
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this DatastoreMetrics.


        :param partitions: The partitions of this DatastoreMetrics.  # noqa: E501
        :type: int
        """
        if partitions is None:
            raise ValueError("Invalid value for `partitions`, must not be `None`")  # noqa: E501

        self._partitions = partitions

    @property
    def records(self):
        """Gets the records of this DatastoreMetrics.  # noqa: E501


        :return: The records of this DatastoreMetrics.  # noqa: E501
        :rtype: int
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this DatastoreMetrics.


        :param records: The records of this DatastoreMetrics.  # noqa: E501
        :type: int
        """
        if records is None:
            raise ValueError("Invalid value for `records`, must not be `None`")  # noqa: E501

        self._records = records

    @property
    def quality_checks(self):
        """Gets the quality_checks of this DatastoreMetrics.  # noqa: E501


        :return: The quality_checks of this DatastoreMetrics.  # noqa: E501
        :rtype: int
        """
        return self._quality_checks

    @quality_checks.setter
    def quality_checks(self, quality_checks):
        """Sets the quality_checks of this DatastoreMetrics.


        :param quality_checks: The quality_checks of this DatastoreMetrics.  # noqa: E501
        :type: int
        """
        if quality_checks is None:
            raise ValueError("Invalid value for `quality_checks`, must not be `None`")  # noqa: E501

        self._quality_checks = quality_checks

    @property
    def anomalies(self):
        """Gets the anomalies of this DatastoreMetrics.  # noqa: E501


        :return: The anomalies of this DatastoreMetrics.  # noqa: E501
        :rtype: int
        """
        return self._anomalies

    @anomalies.setter
    def anomalies(self, anomalies):
        """Sets the anomalies of this DatastoreMetrics.


        :param anomalies: The anomalies of this DatastoreMetrics.  # noqa: E501
        :type: int
        """
        if anomalies is None:
            raise ValueError("Invalid value for `anomalies`, must not be `None`")  # noqa: E501

        self._anomalies = anomalies

    @property
    def new_anomalies(self):
        """Gets the new_anomalies of this DatastoreMetrics.  # noqa: E501


        :return: The new_anomalies of this DatastoreMetrics.  # noqa: E501
        :rtype: int
        """
        return self._new_anomalies

    @new_anomalies.setter
    def new_anomalies(self, new_anomalies):
        """Sets the new_anomalies of this DatastoreMetrics.


        :param new_anomalies: The new_anomalies of this DatastoreMetrics.  # noqa: E501
        :type: int
        """
        if new_anomalies is None:
            raise ValueError("Invalid value for `new_anomalies`, must not be `None`")  # noqa: E501

        self._new_anomalies = new_anomalies

    @property
    def open_anomalies(self):
        """Gets the open_anomalies of this DatastoreMetrics.  # noqa: E501


        :return: The open_anomalies of this DatastoreMetrics.  # noqa: E501
        :rtype: int
        """
        return self._open_anomalies

    @open_anomalies.setter
    def open_anomalies(self, open_anomalies):
        """Sets the open_anomalies of this DatastoreMetrics.


        :param open_anomalies: The open_anomalies of this DatastoreMetrics.  # noqa: E501
        :type: int
        """
        if open_anomalies is None:
            raise ValueError("Invalid value for `open_anomalies`, must not be `None`")  # noqa: E501

        self._open_anomalies = open_anomalies

    @property
    def archived_anomalies(self):
        """Gets the archived_anomalies of this DatastoreMetrics.  # noqa: E501


        :return: The archived_anomalies of this DatastoreMetrics.  # noqa: E501
        :rtype: int
        """
        return self._archived_anomalies

    @archived_anomalies.setter
    def archived_anomalies(self, archived_anomalies):
        """Sets the archived_anomalies of this DatastoreMetrics.


        :param archived_anomalies: The archived_anomalies of this DatastoreMetrics.  # noqa: E501
        :type: int
        """
        if archived_anomalies is None:
            raise ValueError("Invalid value for `archived_anomalies`, must not be `None`")  # noqa: E501

        self._archived_anomalies = archived_anomalies

    @property
    def confidence_score(self):
        """Gets the confidence_score of this DatastoreMetrics.  # noqa: E501


        :return: The confidence_score of this DatastoreMetrics.  # noqa: E501
        :rtype: float
        """
        return self._confidence_score

    @confidence_score.setter
    def confidence_score(self, confidence_score):
        """Sets the confidence_score of this DatastoreMetrics.


        :param confidence_score: The confidence_score of this DatastoreMetrics.  # noqa: E501
        :type: float
        """

        self._confidence_score = confidence_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatastoreMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatastoreMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
