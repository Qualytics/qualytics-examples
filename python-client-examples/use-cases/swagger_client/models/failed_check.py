# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FailedCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quality_check': 'QualityCheck',
        'message': 'str',
        'suggested_field': 'str',
        'suggested_value': 'str',
        'suggested_score': 'float'
    }

    attribute_map = {
        'quality_check': 'quality_check',
        'message': 'message',
        'suggested_field': 'suggested_field',
        'suggested_value': 'suggested_value',
        'suggested_score': 'suggested_score'
    }

    def __init__(self, quality_check=None, message=None, suggested_field=None, suggested_value=None, suggested_score=None):  # noqa: E501
        """FailedCheck - a model defined in Swagger"""  # noqa: E501
        self._quality_check = None
        self._message = None
        self._suggested_field = None
        self._suggested_value = None
        self._suggested_score = None
        self.discriminator = None
        self.quality_check = quality_check
        self.message = message
        if suggested_field is not None:
            self.suggested_field = suggested_field
        if suggested_value is not None:
            self.suggested_value = suggested_value
        if suggested_score is not None:
            self.suggested_score = suggested_score

    @property
    def quality_check(self):
        """Gets the quality_check of this FailedCheck.  # noqa: E501


        :return: The quality_check of this FailedCheck.  # noqa: E501
        :rtype: QualityCheck
        """
        return self._quality_check

    @quality_check.setter
    def quality_check(self, quality_check):
        """Sets the quality_check of this FailedCheck.


        :param quality_check: The quality_check of this FailedCheck.  # noqa: E501
        :type: QualityCheck
        """
        if quality_check is None:
            raise ValueError("Invalid value for `quality_check`, must not be `None`")  # noqa: E501

        self._quality_check = quality_check

    @property
    def message(self):
        """Gets the message of this FailedCheck.  # noqa: E501


        :return: The message of this FailedCheck.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this FailedCheck.


        :param message: The message of this FailedCheck.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def suggested_field(self):
        """Gets the suggested_field of this FailedCheck.  # noqa: E501


        :return: The suggested_field of this FailedCheck.  # noqa: E501
        :rtype: str
        """
        return self._suggested_field

    @suggested_field.setter
    def suggested_field(self, suggested_field):
        """Sets the suggested_field of this FailedCheck.


        :param suggested_field: The suggested_field of this FailedCheck.  # noqa: E501
        :type: str
        """

        self._suggested_field = suggested_field

    @property
    def suggested_value(self):
        """Gets the suggested_value of this FailedCheck.  # noqa: E501


        :return: The suggested_value of this FailedCheck.  # noqa: E501
        :rtype: str
        """
        return self._suggested_value

    @suggested_value.setter
    def suggested_value(self, suggested_value):
        """Sets the suggested_value of this FailedCheck.


        :param suggested_value: The suggested_value of this FailedCheck.  # noqa: E501
        :type: str
        """

        self._suggested_value = suggested_value

    @property
    def suggested_score(self):
        """Gets the suggested_score of this FailedCheck.  # noqa: E501


        :return: The suggested_score of this FailedCheck.  # noqa: E501
        :rtype: float
        """
        return self._suggested_score

    @suggested_score.setter
    def suggested_score(self, suggested_score):
        """Sets the suggested_score of this FailedCheck.


        :param suggested_score: The suggested_score of this FailedCheck.  # noqa: E501
        :type: float
        """

        self._suggested_score = suggested_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FailedCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FailedCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
