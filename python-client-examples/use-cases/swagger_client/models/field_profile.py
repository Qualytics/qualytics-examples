# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'name': 'str',
        'field_type': 'FieldType',
        'type_declared': 'bool',
        'completeness': 'float',
        'approximate_distinct_values': 'float',
        'mean': 'float',
        'min': 'float',
        'max': 'float',
        'sum': 'float',
        'std_dev': 'float',
        'kurtosis': 'float',
        'skewness': 'float',
        'entropy': 'float',
        'min_length': 'float',
        'max_length': 'float',
        'unique_distinct_ratio': 'float',
        'is_not_normal': 'bool',
        'q1': 'float',
        'median': 'float',
        'q3': 'float',
        'kll': 'KllSketch',
        'histogram_buckets': 'list[HistogramBucket]',
        'field_correlations': 'list[FieldCorrelation]',
        'regression_models': 'list[RegressionModel]'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'name': 'name',
        'field_type': 'field_type',
        'type_declared': 'type_declared',
        'completeness': 'completeness',
        'approximate_distinct_values': 'approximate_distinct_values',
        'mean': 'mean',
        'min': 'min',
        'max': 'max',
        'sum': 'sum',
        'std_dev': 'std_dev',
        'kurtosis': 'kurtosis',
        'skewness': 'skewness',
        'entropy': 'entropy',
        'min_length': 'min_length',
        'max_length': 'max_length',
        'unique_distinct_ratio': 'unique_distinct_ratio',
        'is_not_normal': 'is_not_normal',
        'q1': 'q1',
        'median': 'median',
        'q3': 'q3',
        'kll': 'kll',
        'histogram_buckets': 'histogram_buckets',
        'field_correlations': 'field_correlations',
        'regression_models': 'regression_models'
    }

    def __init__(self, id=None, created=None, name=None, field_type=None, type_declared=None, completeness=None, approximate_distinct_values=None, mean=None, min=None, max=None, sum=None, std_dev=None, kurtosis=None, skewness=None, entropy=None, min_length=None, max_length=None, unique_distinct_ratio=None, is_not_normal=None, q1=None, median=None, q3=None, kll=None, histogram_buckets=None, field_correlations=None, regression_models=None):  # noqa: E501
        """FieldProfile - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._name = None
        self._field_type = None
        self._type_declared = None
        self._completeness = None
        self._approximate_distinct_values = None
        self._mean = None
        self._min = None
        self._max = None
        self._sum = None
        self._std_dev = None
        self._kurtosis = None
        self._skewness = None
        self._entropy = None
        self._min_length = None
        self._max_length = None
        self._unique_distinct_ratio = None
        self._is_not_normal = None
        self._q1 = None
        self._median = None
        self._q3 = None
        self._kll = None
        self._histogram_buckets = None
        self._field_correlations = None
        self._regression_models = None
        self.discriminator = None
        self.id = id
        self.created = created
        self.name = name
        self.field_type = field_type
        self.type_declared = type_declared
        self.completeness = completeness
        if approximate_distinct_values is not None:
            self.approximate_distinct_values = approximate_distinct_values
        if mean is not None:
            self.mean = mean
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if sum is not None:
            self.sum = sum
        if std_dev is not None:
            self.std_dev = std_dev
        if kurtosis is not None:
            self.kurtosis = kurtosis
        if skewness is not None:
            self.skewness = skewness
        if entropy is not None:
            self.entropy = entropy
        if min_length is not None:
            self.min_length = min_length
        if max_length is not None:
            self.max_length = max_length
        if unique_distinct_ratio is not None:
            self.unique_distinct_ratio = unique_distinct_ratio
        if is_not_normal is not None:
            self.is_not_normal = is_not_normal
        if q1 is not None:
            self.q1 = q1
        if median is not None:
            self.median = median
        if q3 is not None:
            self.q3 = q3
        if kll is not None:
            self.kll = kll
        if histogram_buckets is not None:
            self.histogram_buckets = histogram_buckets
        if field_correlations is not None:
            self.field_correlations = field_correlations
        if regression_models is not None:
            self.regression_models = regression_models

    @property
    def id(self):
        """Gets the id of this FieldProfile.  # noqa: E501


        :return: The id of this FieldProfile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldProfile.


        :param id: The id of this FieldProfile.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this FieldProfile.  # noqa: E501


        :return: The created of this FieldProfile.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FieldProfile.


        :param created: The created of this FieldProfile.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def name(self):
        """Gets the name of this FieldProfile.  # noqa: E501


        :return: The name of this FieldProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldProfile.


        :param name: The name of this FieldProfile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def field_type(self):
        """Gets the field_type of this FieldProfile.  # noqa: E501


        :return: The field_type of this FieldProfile.  # noqa: E501
        :rtype: FieldType
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this FieldProfile.


        :param field_type: The field_type of this FieldProfile.  # noqa: E501
        :type: FieldType
        """
        if field_type is None:
            raise ValueError("Invalid value for `field_type`, must not be `None`")  # noqa: E501

        self._field_type = field_type

    @property
    def type_declared(self):
        """Gets the type_declared of this FieldProfile.  # noqa: E501


        :return: The type_declared of this FieldProfile.  # noqa: E501
        :rtype: bool
        """
        return self._type_declared

    @type_declared.setter
    def type_declared(self, type_declared):
        """Sets the type_declared of this FieldProfile.


        :param type_declared: The type_declared of this FieldProfile.  # noqa: E501
        :type: bool
        """
        if type_declared is None:
            raise ValueError("Invalid value for `type_declared`, must not be `None`")  # noqa: E501

        self._type_declared = type_declared

    @property
    def completeness(self):
        """Gets the completeness of this FieldProfile.  # noqa: E501


        :return: The completeness of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._completeness

    @completeness.setter
    def completeness(self, completeness):
        """Sets the completeness of this FieldProfile.


        :param completeness: The completeness of this FieldProfile.  # noqa: E501
        :type: float
        """
        if completeness is None:
            raise ValueError("Invalid value for `completeness`, must not be `None`")  # noqa: E501

        self._completeness = completeness

    @property
    def approximate_distinct_values(self):
        """Gets the approximate_distinct_values of this FieldProfile.  # noqa: E501


        :return: The approximate_distinct_values of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._approximate_distinct_values

    @approximate_distinct_values.setter
    def approximate_distinct_values(self, approximate_distinct_values):
        """Sets the approximate_distinct_values of this FieldProfile.


        :param approximate_distinct_values: The approximate_distinct_values of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._approximate_distinct_values = approximate_distinct_values

    @property
    def mean(self):
        """Gets the mean of this FieldProfile.  # noqa: E501


        :return: The mean of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this FieldProfile.


        :param mean: The mean of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._mean = mean

    @property
    def min(self):
        """Gets the min of this FieldProfile.  # noqa: E501


        :return: The min of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this FieldProfile.


        :param min: The min of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this FieldProfile.  # noqa: E501


        :return: The max of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this FieldProfile.


        :param max: The max of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def sum(self):
        """Gets the sum of this FieldProfile.  # noqa: E501


        :return: The sum of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this FieldProfile.


        :param sum: The sum of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._sum = sum

    @property
    def std_dev(self):
        """Gets the std_dev of this FieldProfile.  # noqa: E501


        :return: The std_dev of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._std_dev

    @std_dev.setter
    def std_dev(self, std_dev):
        """Sets the std_dev of this FieldProfile.


        :param std_dev: The std_dev of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._std_dev = std_dev

    @property
    def kurtosis(self):
        """Gets the kurtosis of this FieldProfile.  # noqa: E501


        :return: The kurtosis of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._kurtosis

    @kurtosis.setter
    def kurtosis(self, kurtosis):
        """Sets the kurtosis of this FieldProfile.


        :param kurtosis: The kurtosis of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._kurtosis = kurtosis

    @property
    def skewness(self):
        """Gets the skewness of this FieldProfile.  # noqa: E501


        :return: The skewness of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._skewness

    @skewness.setter
    def skewness(self, skewness):
        """Sets the skewness of this FieldProfile.


        :param skewness: The skewness of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._skewness = skewness

    @property
    def entropy(self):
        """Gets the entropy of this FieldProfile.  # noqa: E501


        :return: The entropy of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._entropy

    @entropy.setter
    def entropy(self, entropy):
        """Sets the entropy of this FieldProfile.


        :param entropy: The entropy of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._entropy = entropy

    @property
    def min_length(self):
        """Gets the min_length of this FieldProfile.  # noqa: E501


        :return: The min_length of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this FieldProfile.


        :param min_length: The min_length of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._min_length = min_length

    @property
    def max_length(self):
        """Gets the max_length of this FieldProfile.  # noqa: E501


        :return: The max_length of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this FieldProfile.


        :param max_length: The max_length of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._max_length = max_length

    @property
    def unique_distinct_ratio(self):
        """Gets the unique_distinct_ratio of this FieldProfile.  # noqa: E501


        :return: The unique_distinct_ratio of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._unique_distinct_ratio

    @unique_distinct_ratio.setter
    def unique_distinct_ratio(self, unique_distinct_ratio):
        """Sets the unique_distinct_ratio of this FieldProfile.


        :param unique_distinct_ratio: The unique_distinct_ratio of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._unique_distinct_ratio = unique_distinct_ratio

    @property
    def is_not_normal(self):
        """Gets the is_not_normal of this FieldProfile.  # noqa: E501


        :return: The is_not_normal of this FieldProfile.  # noqa: E501
        :rtype: bool
        """
        return self._is_not_normal

    @is_not_normal.setter
    def is_not_normal(self, is_not_normal):
        """Sets the is_not_normal of this FieldProfile.


        :param is_not_normal: The is_not_normal of this FieldProfile.  # noqa: E501
        :type: bool
        """

        self._is_not_normal = is_not_normal

    @property
    def q1(self):
        """Gets the q1 of this FieldProfile.  # noqa: E501


        :return: The q1 of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._q1

    @q1.setter
    def q1(self, q1):
        """Sets the q1 of this FieldProfile.


        :param q1: The q1 of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._q1 = q1

    @property
    def median(self):
        """Gets the median of this FieldProfile.  # noqa: E501


        :return: The median of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this FieldProfile.


        :param median: The median of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._median = median

    @property
    def q3(self):
        """Gets the q3 of this FieldProfile.  # noqa: E501


        :return: The q3 of this FieldProfile.  # noqa: E501
        :rtype: float
        """
        return self._q3

    @q3.setter
    def q3(self, q3):
        """Sets the q3 of this FieldProfile.


        :param q3: The q3 of this FieldProfile.  # noqa: E501
        :type: float
        """

        self._q3 = q3

    @property
    def kll(self):
        """Gets the kll of this FieldProfile.  # noqa: E501


        :return: The kll of this FieldProfile.  # noqa: E501
        :rtype: KllSketch
        """
        return self._kll

    @kll.setter
    def kll(self, kll):
        """Sets the kll of this FieldProfile.


        :param kll: The kll of this FieldProfile.  # noqa: E501
        :type: KllSketch
        """

        self._kll = kll

    @property
    def histogram_buckets(self):
        """Gets the histogram_buckets of this FieldProfile.  # noqa: E501


        :return: The histogram_buckets of this FieldProfile.  # noqa: E501
        :rtype: list[HistogramBucket]
        """
        return self._histogram_buckets

    @histogram_buckets.setter
    def histogram_buckets(self, histogram_buckets):
        """Sets the histogram_buckets of this FieldProfile.


        :param histogram_buckets: The histogram_buckets of this FieldProfile.  # noqa: E501
        :type: list[HistogramBucket]
        """

        self._histogram_buckets = histogram_buckets

    @property
    def field_correlations(self):
        """Gets the field_correlations of this FieldProfile.  # noqa: E501


        :return: The field_correlations of this FieldProfile.  # noqa: E501
        :rtype: list[FieldCorrelation]
        """
        return self._field_correlations

    @field_correlations.setter
    def field_correlations(self, field_correlations):
        """Sets the field_correlations of this FieldProfile.


        :param field_correlations: The field_correlations of this FieldProfile.  # noqa: E501
        :type: list[FieldCorrelation]
        """

        self._field_correlations = field_correlations

    @property
    def regression_models(self):
        """Gets the regression_models of this FieldProfile.  # noqa: E501


        :return: The regression_models of this FieldProfile.  # noqa: E501
        :rtype: list[RegressionModel]
        """
        return self._regression_models

    @regression_models.setter
    def regression_models(self, regression_models):
        """Sets the regression_models of this FieldProfile.


        :param regression_models: The regression_models of this FieldProfile.  # noqa: E501
        :type: list[RegressionModel]
        """

        self._regression_models = regression_models

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
