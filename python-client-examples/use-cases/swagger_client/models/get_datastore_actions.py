# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetDatastoreActions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initialized': 'bool',
        'should_catalog': 'bool',
        'should_profile': 'bool',
        'should_scan': 'bool'
    }

    attribute_map = {
        'initialized': 'initialized',
        'should_catalog': 'should_catalog',
        'should_profile': 'should_profile',
        'should_scan': 'should_scan'
    }

    def __init__(self, initialized=None, should_catalog=None, should_profile=None, should_scan=None):  # noqa: E501
        """GetDatastoreActions - a model defined in Swagger"""  # noqa: E501
        self._initialized = None
        self._should_catalog = None
        self._should_profile = None
        self._should_scan = None
        self.discriminator = None
        self.initialized = initialized
        self.should_catalog = should_catalog
        self.should_profile = should_profile
        self.should_scan = should_scan

    @property
    def initialized(self):
        """Gets the initialized of this GetDatastoreActions.  # noqa: E501


        :return: The initialized of this GetDatastoreActions.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this GetDatastoreActions.


        :param initialized: The initialized of this GetDatastoreActions.  # noqa: E501
        :type: bool
        """
        if initialized is None:
            raise ValueError("Invalid value for `initialized`, must not be `None`")  # noqa: E501

        self._initialized = initialized

    @property
    def should_catalog(self):
        """Gets the should_catalog of this GetDatastoreActions.  # noqa: E501


        :return: The should_catalog of this GetDatastoreActions.  # noqa: E501
        :rtype: bool
        """
        return self._should_catalog

    @should_catalog.setter
    def should_catalog(self, should_catalog):
        """Sets the should_catalog of this GetDatastoreActions.


        :param should_catalog: The should_catalog of this GetDatastoreActions.  # noqa: E501
        :type: bool
        """
        if should_catalog is None:
            raise ValueError("Invalid value for `should_catalog`, must not be `None`")  # noqa: E501

        self._should_catalog = should_catalog

    @property
    def should_profile(self):
        """Gets the should_profile of this GetDatastoreActions.  # noqa: E501


        :return: The should_profile of this GetDatastoreActions.  # noqa: E501
        :rtype: bool
        """
        return self._should_profile

    @should_profile.setter
    def should_profile(self, should_profile):
        """Sets the should_profile of this GetDatastoreActions.


        :param should_profile: The should_profile of this GetDatastoreActions.  # noqa: E501
        :type: bool
        """
        if should_profile is None:
            raise ValueError("Invalid value for `should_profile`, must not be `None`")  # noqa: E501

        self._should_profile = should_profile

    @property
    def should_scan(self):
        """Gets the should_scan of this GetDatastoreActions.  # noqa: E501


        :return: The should_scan of this GetDatastoreActions.  # noqa: E501
        :rtype: bool
        """
        return self._should_scan

    @should_scan.setter
    def should_scan(self, should_scan):
        """Sets the should_scan of this GetDatastoreActions.


        :param should_scan: The should_scan of this GetDatastoreActions.  # noqa: E501
        :type: bool
        """
        if should_scan is None:
            raise ValueError("Invalid value for `should_scan`, must not be `None`")  # noqa: E501

        self._should_scan = should_scan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDatastoreActions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDatastoreActions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
