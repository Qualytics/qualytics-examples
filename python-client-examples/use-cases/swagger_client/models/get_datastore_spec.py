# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetDatastoreSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'type': 'str',
        'implemented': 'bool',
        'supports_enrichment': 'bool',
        'properties': 'list[GetDatastoreSpecProperties]'
    }

    attribute_map = {
        'display_name': 'display_name',
        'type': 'type',
        'implemented': 'implemented',
        'supports_enrichment': 'supports_enrichment',
        'properties': 'properties'
    }

    def __init__(self, display_name=None, type=None, implemented=None, supports_enrichment=None, properties=None):  # noqa: E501
        """GetDatastoreSpec - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._type = None
        self._implemented = None
        self._supports_enrichment = None
        self._properties = None
        self.discriminator = None
        self.display_name = display_name
        self.type = type
        self.implemented = implemented
        self.supports_enrichment = supports_enrichment
        self.properties = properties

    @property
    def display_name(self):
        """Gets the display_name of this GetDatastoreSpec.  # noqa: E501


        :return: The display_name of this GetDatastoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetDatastoreSpec.


        :param display_name: The display_name of this GetDatastoreSpec.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def type(self):
        """Gets the type of this GetDatastoreSpec.  # noqa: E501


        :return: The type of this GetDatastoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetDatastoreSpec.


        :param type: The type of this GetDatastoreSpec.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["postgresql", "mysql", "sqlserver", "oracle", "snowflake", "redshift", "bigquery", "databricks", "synapse", "mariadb", "s3", "gcs", "wasb", "abfs", "qfs"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def implemented(self):
        """Gets the implemented of this GetDatastoreSpec.  # noqa: E501


        :return: The implemented of this GetDatastoreSpec.  # noqa: E501
        :rtype: bool
        """
        return self._implemented

    @implemented.setter
    def implemented(self, implemented):
        """Sets the implemented of this GetDatastoreSpec.


        :param implemented: The implemented of this GetDatastoreSpec.  # noqa: E501
        :type: bool
        """
        if implemented is None:
            raise ValueError("Invalid value for `implemented`, must not be `None`")  # noqa: E501

        self._implemented = implemented

    @property
    def supports_enrichment(self):
        """Gets the supports_enrichment of this GetDatastoreSpec.  # noqa: E501


        :return: The supports_enrichment of this GetDatastoreSpec.  # noqa: E501
        :rtype: bool
        """
        return self._supports_enrichment

    @supports_enrichment.setter
    def supports_enrichment(self, supports_enrichment):
        """Sets the supports_enrichment of this GetDatastoreSpec.


        :param supports_enrichment: The supports_enrichment of this GetDatastoreSpec.  # noqa: E501
        :type: bool
        """
        if supports_enrichment is None:
            raise ValueError("Invalid value for `supports_enrichment`, must not be `None`")  # noqa: E501

        self._supports_enrichment = supports_enrichment

    @property
    def properties(self):
        """Gets the properties of this GetDatastoreSpec.  # noqa: E501


        :return: The properties of this GetDatastoreSpec.  # noqa: E501
        :rtype: list[GetDatastoreSpecProperties]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this GetDatastoreSpec.


        :param properties: The properties of this GetDatastoreSpec.  # noqa: E501
        :type: list[GetDatastoreSpecProperties]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDatastoreSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDatastoreSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
