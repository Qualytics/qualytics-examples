# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetDatastoreSpecProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'map_to': 'str',
        'required': 'bool',
        'title': 'str',
        'type': 'str',
        'values': 'list[str]',
        'secret': 'bool',
        'minimum': 'int',
        'maximum': 'int',
        'placeholder': 'object',
        'default': 'object'
    }

    attribute_map = {
        'field': 'field',
        'map_to': 'map_to',
        'required': 'required',
        'title': 'title',
        'type': 'type',
        'values': 'values',
        'secret': 'secret',
        'minimum': 'minimum',
        'maximum': 'maximum',
        'placeholder': 'placeholder',
        'default': 'default'
    }

    def __init__(self, field=None, map_to=None, required=None, title=None, type=None, values=None, secret=None, minimum=None, maximum=None, placeholder=None, default=None):  # noqa: E501
        """GetDatastoreSpecProperties - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._map_to = None
        self._required = None
        self._title = None
        self._type = None
        self._values = None
        self._secret = None
        self._minimum = None
        self._maximum = None
        self._placeholder = None
        self._default = None
        self.discriminator = None
        self.field = field
        self.map_to = map_to
        self.required = required
        self.title = title
        self.type = type
        if values is not None:
            self.values = values
        if secret is not None:
            self.secret = secret
        if minimum is not None:
            self.minimum = minimum
        if maximum is not None:
            self.maximum = maximum
        if placeholder is not None:
            self.placeholder = placeholder
        if default is not None:
            self.default = default

    @property
    def field(self):
        """Gets the field of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The field of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this GetDatastoreSpecProperties.


        :param field: The field of this GetDatastoreSpecProperties.  # noqa: E501
        :type: str
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def map_to(self):
        """Gets the map_to of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The map_to of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: str
        """
        return self._map_to

    @map_to.setter
    def map_to(self, map_to):
        """Sets the map_to of this GetDatastoreSpecProperties.


        :param map_to: The map_to of this GetDatastoreSpecProperties.  # noqa: E501
        :type: str
        """
        if map_to is None:
            raise ValueError("Invalid value for `map_to`, must not be `None`")  # noqa: E501

        self._map_to = map_to

    @property
    def required(self):
        """Gets the required of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The required of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this GetDatastoreSpecProperties.


        :param required: The required of this GetDatastoreSpecProperties.  # noqa: E501
        :type: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")  # noqa: E501

        self._required = required

    @property
    def title(self):
        """Gets the title of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The title of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetDatastoreSpecProperties.


        :param title: The title of this GetDatastoreSpecProperties.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The type of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetDatastoreSpecProperties.


        :param type: The type of this GetDatastoreSpecProperties.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["datastore", "container", "string", "boolean", "number", "datetime", "list", "enum", "field", "file"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def values(self):
        """Gets the values of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The values of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this GetDatastoreSpecProperties.


        :param values: The values of this GetDatastoreSpecProperties.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def secret(self):
        """Gets the secret of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The secret of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: bool
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this GetDatastoreSpecProperties.


        :param secret: The secret of this GetDatastoreSpecProperties.  # noqa: E501
        :type: bool
        """

        self._secret = secret

    @property
    def minimum(self):
        """Gets the minimum of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The minimum of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: int
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this GetDatastoreSpecProperties.


        :param minimum: The minimum of this GetDatastoreSpecProperties.  # noqa: E501
        :type: int
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The maximum of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: int
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this GetDatastoreSpecProperties.


        :param maximum: The maximum of this GetDatastoreSpecProperties.  # noqa: E501
        :type: int
        """

        self._maximum = maximum

    @property
    def placeholder(self):
        """Gets the placeholder of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The placeholder of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: object
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this GetDatastoreSpecProperties.


        :param placeholder: The placeholder of this GetDatastoreSpecProperties.  # noqa: E501
        :type: object
        """

        self._placeholder = placeholder

    @property
    def default(self):
        """Gets the default of this GetDatastoreSpecProperties.  # noqa: E501


        :return: The default of this GetDatastoreSpecProperties.  # noqa: E501
        :rtype: object
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this GetDatastoreSpecProperties.


        :param default: The default of this GetDatastoreSpecProperties.  # noqa: E501
        :type: object
        """

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDatastoreSpecProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDatastoreSpecProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
