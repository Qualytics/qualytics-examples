# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetInsights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'generated_at': 'datetime',
        'report_date': 'date',
        'total_users': 'int',
        'trend_users': 'float',
        'total_datastores': 'int',
        'trend_datastores': 'float',
        'total_records_profiled': 'int',
        'trend_records_profiled': 'float',
        'total_fields_profiled': 'int',
        'trend_fields_profiled': 'float',
        'total_active_checks': 'int',
        'trend_active_checks': 'float',
        'total_inferred_checks': 'int',
        'trend_inferred_checks': 'float',
        'total_authored_checks': 'int',
        'trend_authored_checks': 'float',
        'total_sla_monitoring': 'int',
        'trend_sla_monitoring': 'float',
        'total_sla_violations': 'int',
        'trend_sla_violations': 'float',
        'total_records_scanned': 'int',
        'trend_records_scanned': 'float',
        'total_anomalies_identified': 'int',
        'trend_anomalies_identified': 'float',
        'total_anomalies_active': 'int',
        'trend_anomalies_active': 'float',
        'total_anomalies_acknowledged': 'int',
        'trend_anomalies_acknowledged': 'float',
        'total_anomalies_resolved': 'int',
        'trend_anomalies_resolved': 'float',
        'total_anomalies_invalid': 'int',
        'trend_anomalies_invalid': 'float',
        'week_records_profiled': 'list[GetInsightsDailyMetric]',
        'week_fields_profiled': 'list[GetInsightsDailyMetric]',
        'week_inferred_checks': 'list[GetInsightsDailyMetric]',
        'week_authored_checks': 'list[GetInsightsDailyMetric]',
        'week_sla_monitoring': 'list[GetInsightsDailyMetric]',
        'week_sla_violations': 'list[GetInsightsDailyMetric]',
        'week_records_scanned': 'list[GetInsightsDailyMetric]',
        'week_anomalies_identified': 'list[GetInsightsDailyMetric]',
        'week_anomalies_active': 'list[GetInsightsDailyMetric]',
        'week_anomalies_acknowledged': 'list[GetInsightsDailyMetric]',
        'week_anomalies_resolved': 'list[GetInsightsDailyMetric]',
        'week_anomalies_invalid': 'list[GetInsightsDailyMetric]'
    }

    attribute_map = {
        'generated_at': 'generated_at',
        'report_date': 'report_date',
        'total_users': 'total_users',
        'trend_users': 'trend_users',
        'total_datastores': 'total_datastores',
        'trend_datastores': 'trend_datastores',
        'total_records_profiled': 'total_records_profiled',
        'trend_records_profiled': 'trend_records_profiled',
        'total_fields_profiled': 'total_fields_profiled',
        'trend_fields_profiled': 'trend_fields_profiled',
        'total_active_checks': 'total_active_checks',
        'trend_active_checks': 'trend_active_checks',
        'total_inferred_checks': 'total_inferred_checks',
        'trend_inferred_checks': 'trend_inferred_checks',
        'total_authored_checks': 'total_authored_checks',
        'trend_authored_checks': 'trend_authored_checks',
        'total_sla_monitoring': 'total_sla_monitoring',
        'trend_sla_monitoring': 'trend_sla_monitoring',
        'total_sla_violations': 'total_sla_violations',
        'trend_sla_violations': 'trend_sla_violations',
        'total_records_scanned': 'total_records_scanned',
        'trend_records_scanned': 'trend_records_scanned',
        'total_anomalies_identified': 'total_anomalies_identified',
        'trend_anomalies_identified': 'trend_anomalies_identified',
        'total_anomalies_active': 'total_anomalies_active',
        'trend_anomalies_active': 'trend_anomalies_active',
        'total_anomalies_acknowledged': 'total_anomalies_acknowledged',
        'trend_anomalies_acknowledged': 'trend_anomalies_acknowledged',
        'total_anomalies_resolved': 'total_anomalies_resolved',
        'trend_anomalies_resolved': 'trend_anomalies_resolved',
        'total_anomalies_invalid': 'total_anomalies_invalid',
        'trend_anomalies_invalid': 'trend_anomalies_invalid',
        'week_records_profiled': 'week_records_profiled',
        'week_fields_profiled': 'week_fields_profiled',
        'week_inferred_checks': 'week_inferred_checks',
        'week_authored_checks': 'week_authored_checks',
        'week_sla_monitoring': 'week_sla_monitoring',
        'week_sla_violations': 'week_sla_violations',
        'week_records_scanned': 'week_records_scanned',
        'week_anomalies_identified': 'week_anomalies_identified',
        'week_anomalies_active': 'week_anomalies_active',
        'week_anomalies_acknowledged': 'week_anomalies_acknowledged',
        'week_anomalies_resolved': 'week_anomalies_resolved',
        'week_anomalies_invalid': 'week_anomalies_invalid'
    }

    def __init__(self, generated_at=None, report_date=None, total_users=None, trend_users=None, total_datastores=None, trend_datastores=None, total_records_profiled=None, trend_records_profiled=None, total_fields_profiled=None, trend_fields_profiled=None, total_active_checks=None, trend_active_checks=None, total_inferred_checks=None, trend_inferred_checks=None, total_authored_checks=None, trend_authored_checks=None, total_sla_monitoring=None, trend_sla_monitoring=None, total_sla_violations=None, trend_sla_violations=None, total_records_scanned=None, trend_records_scanned=None, total_anomalies_identified=None, trend_anomalies_identified=None, total_anomalies_active=None, trend_anomalies_active=None, total_anomalies_acknowledged=None, trend_anomalies_acknowledged=None, total_anomalies_resolved=None, trend_anomalies_resolved=None, total_anomalies_invalid=None, trend_anomalies_invalid=None, week_records_profiled=None, week_fields_profiled=None, week_inferred_checks=None, week_authored_checks=None, week_sla_monitoring=None, week_sla_violations=None, week_records_scanned=None, week_anomalies_identified=None, week_anomalies_active=None, week_anomalies_acknowledged=None, week_anomalies_resolved=None, week_anomalies_invalid=None):  # noqa: E501
        """GetInsights - a model defined in Swagger"""  # noqa: E501
        self._generated_at = None
        self._report_date = None
        self._total_users = None
        self._trend_users = None
        self._total_datastores = None
        self._trend_datastores = None
        self._total_records_profiled = None
        self._trend_records_profiled = None
        self._total_fields_profiled = None
        self._trend_fields_profiled = None
        self._total_active_checks = None
        self._trend_active_checks = None
        self._total_inferred_checks = None
        self._trend_inferred_checks = None
        self._total_authored_checks = None
        self._trend_authored_checks = None
        self._total_sla_monitoring = None
        self._trend_sla_monitoring = None
        self._total_sla_violations = None
        self._trend_sla_violations = None
        self._total_records_scanned = None
        self._trend_records_scanned = None
        self._total_anomalies_identified = None
        self._trend_anomalies_identified = None
        self._total_anomalies_active = None
        self._trend_anomalies_active = None
        self._total_anomalies_acknowledged = None
        self._trend_anomalies_acknowledged = None
        self._total_anomalies_resolved = None
        self._trend_anomalies_resolved = None
        self._total_anomalies_invalid = None
        self._trend_anomalies_invalid = None
        self._week_records_profiled = None
        self._week_fields_profiled = None
        self._week_inferred_checks = None
        self._week_authored_checks = None
        self._week_sla_monitoring = None
        self._week_sla_violations = None
        self._week_records_scanned = None
        self._week_anomalies_identified = None
        self._week_anomalies_active = None
        self._week_anomalies_acknowledged = None
        self._week_anomalies_resolved = None
        self._week_anomalies_invalid = None
        self.discriminator = None
        self.generated_at = generated_at
        self.report_date = report_date
        self.total_users = total_users
        self.trend_users = trend_users
        self.total_datastores = total_datastores
        self.trend_datastores = trend_datastores
        self.total_records_profiled = total_records_profiled
        self.trend_records_profiled = trend_records_profiled
        self.total_fields_profiled = total_fields_profiled
        self.trend_fields_profiled = trend_fields_profiled
        self.total_active_checks = total_active_checks
        self.trend_active_checks = trend_active_checks
        self.total_inferred_checks = total_inferred_checks
        self.trend_inferred_checks = trend_inferred_checks
        self.total_authored_checks = total_authored_checks
        self.trend_authored_checks = trend_authored_checks
        self.total_sla_monitoring = total_sla_monitoring
        self.trend_sla_monitoring = trend_sla_monitoring
        self.total_sla_violations = total_sla_violations
        self.trend_sla_violations = trend_sla_violations
        self.total_records_scanned = total_records_scanned
        self.trend_records_scanned = trend_records_scanned
        self.total_anomalies_identified = total_anomalies_identified
        self.trend_anomalies_identified = trend_anomalies_identified
        self.total_anomalies_active = total_anomalies_active
        self.trend_anomalies_active = trend_anomalies_active
        self.total_anomalies_acknowledged = total_anomalies_acknowledged
        self.trend_anomalies_acknowledged = trend_anomalies_acknowledged
        self.total_anomalies_resolved = total_anomalies_resolved
        self.trend_anomalies_resolved = trend_anomalies_resolved
        self.total_anomalies_invalid = total_anomalies_invalid
        self.trend_anomalies_invalid = trend_anomalies_invalid
        self.week_records_profiled = week_records_profiled
        self.week_fields_profiled = week_fields_profiled
        self.week_inferred_checks = week_inferred_checks
        self.week_authored_checks = week_authored_checks
        self.week_sla_monitoring = week_sla_monitoring
        self.week_sla_violations = week_sla_violations
        self.week_records_scanned = week_records_scanned
        self.week_anomalies_identified = week_anomalies_identified
        self.week_anomalies_active = week_anomalies_active
        self.week_anomalies_acknowledged = week_anomalies_acknowledged
        self.week_anomalies_resolved = week_anomalies_resolved
        self.week_anomalies_invalid = week_anomalies_invalid

    @property
    def generated_at(self):
        """Gets the generated_at of this GetInsights.  # noqa: E501


        :return: The generated_at of this GetInsights.  # noqa: E501
        :rtype: datetime
        """
        return self._generated_at

    @generated_at.setter
    def generated_at(self, generated_at):
        """Sets the generated_at of this GetInsights.


        :param generated_at: The generated_at of this GetInsights.  # noqa: E501
        :type: datetime
        """
        if generated_at is None:
            raise ValueError("Invalid value for `generated_at`, must not be `None`")  # noqa: E501

        self._generated_at = generated_at

    @property
    def report_date(self):
        """Gets the report_date of this GetInsights.  # noqa: E501


        :return: The report_date of this GetInsights.  # noqa: E501
        :rtype: date
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date):
        """Sets the report_date of this GetInsights.


        :param report_date: The report_date of this GetInsights.  # noqa: E501
        :type: date
        """
        if report_date is None:
            raise ValueError("Invalid value for `report_date`, must not be `None`")  # noqa: E501

        self._report_date = report_date

    @property
    def total_users(self):
        """Gets the total_users of this GetInsights.  # noqa: E501


        :return: The total_users of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_users

    @total_users.setter
    def total_users(self, total_users):
        """Sets the total_users of this GetInsights.


        :param total_users: The total_users of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_users is None:
            raise ValueError("Invalid value for `total_users`, must not be `None`")  # noqa: E501

        self._total_users = total_users

    @property
    def trend_users(self):
        """Gets the trend_users of this GetInsights.  # noqa: E501


        :return: The trend_users of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_users

    @trend_users.setter
    def trend_users(self, trend_users):
        """Sets the trend_users of this GetInsights.


        :param trend_users: The trend_users of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_users is None:
            raise ValueError("Invalid value for `trend_users`, must not be `None`")  # noqa: E501

        self._trend_users = trend_users

    @property
    def total_datastores(self):
        """Gets the total_datastores of this GetInsights.  # noqa: E501


        :return: The total_datastores of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_datastores

    @total_datastores.setter
    def total_datastores(self, total_datastores):
        """Sets the total_datastores of this GetInsights.


        :param total_datastores: The total_datastores of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_datastores is None:
            raise ValueError("Invalid value for `total_datastores`, must not be `None`")  # noqa: E501

        self._total_datastores = total_datastores

    @property
    def trend_datastores(self):
        """Gets the trend_datastores of this GetInsights.  # noqa: E501


        :return: The trend_datastores of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_datastores

    @trend_datastores.setter
    def trend_datastores(self, trend_datastores):
        """Sets the trend_datastores of this GetInsights.


        :param trend_datastores: The trend_datastores of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_datastores is None:
            raise ValueError("Invalid value for `trend_datastores`, must not be `None`")  # noqa: E501

        self._trend_datastores = trend_datastores

    @property
    def total_records_profiled(self):
        """Gets the total_records_profiled of this GetInsights.  # noqa: E501


        :return: The total_records_profiled of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_records_profiled

    @total_records_profiled.setter
    def total_records_profiled(self, total_records_profiled):
        """Sets the total_records_profiled of this GetInsights.


        :param total_records_profiled: The total_records_profiled of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_records_profiled is None:
            raise ValueError("Invalid value for `total_records_profiled`, must not be `None`")  # noqa: E501

        self._total_records_profiled = total_records_profiled

    @property
    def trend_records_profiled(self):
        """Gets the trend_records_profiled of this GetInsights.  # noqa: E501


        :return: The trend_records_profiled of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_records_profiled

    @trend_records_profiled.setter
    def trend_records_profiled(self, trend_records_profiled):
        """Sets the trend_records_profiled of this GetInsights.


        :param trend_records_profiled: The trend_records_profiled of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_records_profiled is None:
            raise ValueError("Invalid value for `trend_records_profiled`, must not be `None`")  # noqa: E501

        self._trend_records_profiled = trend_records_profiled

    @property
    def total_fields_profiled(self):
        """Gets the total_fields_profiled of this GetInsights.  # noqa: E501


        :return: The total_fields_profiled of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_fields_profiled

    @total_fields_profiled.setter
    def total_fields_profiled(self, total_fields_profiled):
        """Sets the total_fields_profiled of this GetInsights.


        :param total_fields_profiled: The total_fields_profiled of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_fields_profiled is None:
            raise ValueError("Invalid value for `total_fields_profiled`, must not be `None`")  # noqa: E501

        self._total_fields_profiled = total_fields_profiled

    @property
    def trend_fields_profiled(self):
        """Gets the trend_fields_profiled of this GetInsights.  # noqa: E501


        :return: The trend_fields_profiled of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_fields_profiled

    @trend_fields_profiled.setter
    def trend_fields_profiled(self, trend_fields_profiled):
        """Sets the trend_fields_profiled of this GetInsights.


        :param trend_fields_profiled: The trend_fields_profiled of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_fields_profiled is None:
            raise ValueError("Invalid value for `trend_fields_profiled`, must not be `None`")  # noqa: E501

        self._trend_fields_profiled = trend_fields_profiled

    @property
    def total_active_checks(self):
        """Gets the total_active_checks of this GetInsights.  # noqa: E501


        :return: The total_active_checks of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_active_checks

    @total_active_checks.setter
    def total_active_checks(self, total_active_checks):
        """Sets the total_active_checks of this GetInsights.


        :param total_active_checks: The total_active_checks of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_active_checks is None:
            raise ValueError("Invalid value for `total_active_checks`, must not be `None`")  # noqa: E501

        self._total_active_checks = total_active_checks

    @property
    def trend_active_checks(self):
        """Gets the trend_active_checks of this GetInsights.  # noqa: E501


        :return: The trend_active_checks of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_active_checks

    @trend_active_checks.setter
    def trend_active_checks(self, trend_active_checks):
        """Sets the trend_active_checks of this GetInsights.


        :param trend_active_checks: The trend_active_checks of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_active_checks is None:
            raise ValueError("Invalid value for `trend_active_checks`, must not be `None`")  # noqa: E501

        self._trend_active_checks = trend_active_checks

    @property
    def total_inferred_checks(self):
        """Gets the total_inferred_checks of this GetInsights.  # noqa: E501


        :return: The total_inferred_checks of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_inferred_checks

    @total_inferred_checks.setter
    def total_inferred_checks(self, total_inferred_checks):
        """Sets the total_inferred_checks of this GetInsights.


        :param total_inferred_checks: The total_inferred_checks of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_inferred_checks is None:
            raise ValueError("Invalid value for `total_inferred_checks`, must not be `None`")  # noqa: E501

        self._total_inferred_checks = total_inferred_checks

    @property
    def trend_inferred_checks(self):
        """Gets the trend_inferred_checks of this GetInsights.  # noqa: E501


        :return: The trend_inferred_checks of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_inferred_checks

    @trend_inferred_checks.setter
    def trend_inferred_checks(self, trend_inferred_checks):
        """Sets the trend_inferred_checks of this GetInsights.


        :param trend_inferred_checks: The trend_inferred_checks of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_inferred_checks is None:
            raise ValueError("Invalid value for `trend_inferred_checks`, must not be `None`")  # noqa: E501

        self._trend_inferred_checks = trend_inferred_checks

    @property
    def total_authored_checks(self):
        """Gets the total_authored_checks of this GetInsights.  # noqa: E501


        :return: The total_authored_checks of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_authored_checks

    @total_authored_checks.setter
    def total_authored_checks(self, total_authored_checks):
        """Sets the total_authored_checks of this GetInsights.


        :param total_authored_checks: The total_authored_checks of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_authored_checks is None:
            raise ValueError("Invalid value for `total_authored_checks`, must not be `None`")  # noqa: E501

        self._total_authored_checks = total_authored_checks

    @property
    def trend_authored_checks(self):
        """Gets the trend_authored_checks of this GetInsights.  # noqa: E501


        :return: The trend_authored_checks of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_authored_checks

    @trend_authored_checks.setter
    def trend_authored_checks(self, trend_authored_checks):
        """Sets the trend_authored_checks of this GetInsights.


        :param trend_authored_checks: The trend_authored_checks of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_authored_checks is None:
            raise ValueError("Invalid value for `trend_authored_checks`, must not be `None`")  # noqa: E501

        self._trend_authored_checks = trend_authored_checks

    @property
    def total_sla_monitoring(self):
        """Gets the total_sla_monitoring of this GetInsights.  # noqa: E501


        :return: The total_sla_monitoring of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_sla_monitoring

    @total_sla_monitoring.setter
    def total_sla_monitoring(self, total_sla_monitoring):
        """Sets the total_sla_monitoring of this GetInsights.


        :param total_sla_monitoring: The total_sla_monitoring of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_sla_monitoring is None:
            raise ValueError("Invalid value for `total_sla_monitoring`, must not be `None`")  # noqa: E501

        self._total_sla_monitoring = total_sla_monitoring

    @property
    def trend_sla_monitoring(self):
        """Gets the trend_sla_monitoring of this GetInsights.  # noqa: E501


        :return: The trend_sla_monitoring of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_sla_monitoring

    @trend_sla_monitoring.setter
    def trend_sla_monitoring(self, trend_sla_monitoring):
        """Sets the trend_sla_monitoring of this GetInsights.


        :param trend_sla_monitoring: The trend_sla_monitoring of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_sla_monitoring is None:
            raise ValueError("Invalid value for `trend_sla_monitoring`, must not be `None`")  # noqa: E501

        self._trend_sla_monitoring = trend_sla_monitoring

    @property
    def total_sla_violations(self):
        """Gets the total_sla_violations of this GetInsights.  # noqa: E501


        :return: The total_sla_violations of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_sla_violations

    @total_sla_violations.setter
    def total_sla_violations(self, total_sla_violations):
        """Sets the total_sla_violations of this GetInsights.


        :param total_sla_violations: The total_sla_violations of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_sla_violations is None:
            raise ValueError("Invalid value for `total_sla_violations`, must not be `None`")  # noqa: E501

        self._total_sla_violations = total_sla_violations

    @property
    def trend_sla_violations(self):
        """Gets the trend_sla_violations of this GetInsights.  # noqa: E501


        :return: The trend_sla_violations of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_sla_violations

    @trend_sla_violations.setter
    def trend_sla_violations(self, trend_sla_violations):
        """Sets the trend_sla_violations of this GetInsights.


        :param trend_sla_violations: The trend_sla_violations of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_sla_violations is None:
            raise ValueError("Invalid value for `trend_sla_violations`, must not be `None`")  # noqa: E501

        self._trend_sla_violations = trend_sla_violations

    @property
    def total_records_scanned(self):
        """Gets the total_records_scanned of this GetInsights.  # noqa: E501


        :return: The total_records_scanned of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_records_scanned

    @total_records_scanned.setter
    def total_records_scanned(self, total_records_scanned):
        """Sets the total_records_scanned of this GetInsights.


        :param total_records_scanned: The total_records_scanned of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_records_scanned is None:
            raise ValueError("Invalid value for `total_records_scanned`, must not be `None`")  # noqa: E501

        self._total_records_scanned = total_records_scanned

    @property
    def trend_records_scanned(self):
        """Gets the trend_records_scanned of this GetInsights.  # noqa: E501


        :return: The trend_records_scanned of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_records_scanned

    @trend_records_scanned.setter
    def trend_records_scanned(self, trend_records_scanned):
        """Sets the trend_records_scanned of this GetInsights.


        :param trend_records_scanned: The trend_records_scanned of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_records_scanned is None:
            raise ValueError("Invalid value for `trend_records_scanned`, must not be `None`")  # noqa: E501

        self._trend_records_scanned = trend_records_scanned

    @property
    def total_anomalies_identified(self):
        """Gets the total_anomalies_identified of this GetInsights.  # noqa: E501


        :return: The total_anomalies_identified of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_anomalies_identified

    @total_anomalies_identified.setter
    def total_anomalies_identified(self, total_anomalies_identified):
        """Sets the total_anomalies_identified of this GetInsights.


        :param total_anomalies_identified: The total_anomalies_identified of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_anomalies_identified is None:
            raise ValueError("Invalid value for `total_anomalies_identified`, must not be `None`")  # noqa: E501

        self._total_anomalies_identified = total_anomalies_identified

    @property
    def trend_anomalies_identified(self):
        """Gets the trend_anomalies_identified of this GetInsights.  # noqa: E501


        :return: The trend_anomalies_identified of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_anomalies_identified

    @trend_anomalies_identified.setter
    def trend_anomalies_identified(self, trend_anomalies_identified):
        """Sets the trend_anomalies_identified of this GetInsights.


        :param trend_anomalies_identified: The trend_anomalies_identified of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_anomalies_identified is None:
            raise ValueError("Invalid value for `trend_anomalies_identified`, must not be `None`")  # noqa: E501

        self._trend_anomalies_identified = trend_anomalies_identified

    @property
    def total_anomalies_active(self):
        """Gets the total_anomalies_active of this GetInsights.  # noqa: E501


        :return: The total_anomalies_active of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_anomalies_active

    @total_anomalies_active.setter
    def total_anomalies_active(self, total_anomalies_active):
        """Sets the total_anomalies_active of this GetInsights.


        :param total_anomalies_active: The total_anomalies_active of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_anomalies_active is None:
            raise ValueError("Invalid value for `total_anomalies_active`, must not be `None`")  # noqa: E501

        self._total_anomalies_active = total_anomalies_active

    @property
    def trend_anomalies_active(self):
        """Gets the trend_anomalies_active of this GetInsights.  # noqa: E501


        :return: The trend_anomalies_active of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_anomalies_active

    @trend_anomalies_active.setter
    def trend_anomalies_active(self, trend_anomalies_active):
        """Sets the trend_anomalies_active of this GetInsights.


        :param trend_anomalies_active: The trend_anomalies_active of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_anomalies_active is None:
            raise ValueError("Invalid value for `trend_anomalies_active`, must not be `None`")  # noqa: E501

        self._trend_anomalies_active = trend_anomalies_active

    @property
    def total_anomalies_acknowledged(self):
        """Gets the total_anomalies_acknowledged of this GetInsights.  # noqa: E501


        :return: The total_anomalies_acknowledged of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_anomalies_acknowledged

    @total_anomalies_acknowledged.setter
    def total_anomalies_acknowledged(self, total_anomalies_acknowledged):
        """Sets the total_anomalies_acknowledged of this GetInsights.


        :param total_anomalies_acknowledged: The total_anomalies_acknowledged of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_anomalies_acknowledged is None:
            raise ValueError("Invalid value for `total_anomalies_acknowledged`, must not be `None`")  # noqa: E501

        self._total_anomalies_acknowledged = total_anomalies_acknowledged

    @property
    def trend_anomalies_acknowledged(self):
        """Gets the trend_anomalies_acknowledged of this GetInsights.  # noqa: E501


        :return: The trend_anomalies_acknowledged of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_anomalies_acknowledged

    @trend_anomalies_acknowledged.setter
    def trend_anomalies_acknowledged(self, trend_anomalies_acknowledged):
        """Sets the trend_anomalies_acknowledged of this GetInsights.


        :param trend_anomalies_acknowledged: The trend_anomalies_acknowledged of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_anomalies_acknowledged is None:
            raise ValueError("Invalid value for `trend_anomalies_acknowledged`, must not be `None`")  # noqa: E501

        self._trend_anomalies_acknowledged = trend_anomalies_acknowledged

    @property
    def total_anomalies_resolved(self):
        """Gets the total_anomalies_resolved of this GetInsights.  # noqa: E501


        :return: The total_anomalies_resolved of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_anomalies_resolved

    @total_anomalies_resolved.setter
    def total_anomalies_resolved(self, total_anomalies_resolved):
        """Sets the total_anomalies_resolved of this GetInsights.


        :param total_anomalies_resolved: The total_anomalies_resolved of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_anomalies_resolved is None:
            raise ValueError("Invalid value for `total_anomalies_resolved`, must not be `None`")  # noqa: E501

        self._total_anomalies_resolved = total_anomalies_resolved

    @property
    def trend_anomalies_resolved(self):
        """Gets the trend_anomalies_resolved of this GetInsights.  # noqa: E501


        :return: The trend_anomalies_resolved of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_anomalies_resolved

    @trend_anomalies_resolved.setter
    def trend_anomalies_resolved(self, trend_anomalies_resolved):
        """Sets the trend_anomalies_resolved of this GetInsights.


        :param trend_anomalies_resolved: The trend_anomalies_resolved of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_anomalies_resolved is None:
            raise ValueError("Invalid value for `trend_anomalies_resolved`, must not be `None`")  # noqa: E501

        self._trend_anomalies_resolved = trend_anomalies_resolved

    @property
    def total_anomalies_invalid(self):
        """Gets the total_anomalies_invalid of this GetInsights.  # noqa: E501


        :return: The total_anomalies_invalid of this GetInsights.  # noqa: E501
        :rtype: int
        """
        return self._total_anomalies_invalid

    @total_anomalies_invalid.setter
    def total_anomalies_invalid(self, total_anomalies_invalid):
        """Sets the total_anomalies_invalid of this GetInsights.


        :param total_anomalies_invalid: The total_anomalies_invalid of this GetInsights.  # noqa: E501
        :type: int
        """
        if total_anomalies_invalid is None:
            raise ValueError("Invalid value for `total_anomalies_invalid`, must not be `None`")  # noqa: E501

        self._total_anomalies_invalid = total_anomalies_invalid

    @property
    def trend_anomalies_invalid(self):
        """Gets the trend_anomalies_invalid of this GetInsights.  # noqa: E501


        :return: The trend_anomalies_invalid of this GetInsights.  # noqa: E501
        :rtype: float
        """
        return self._trend_anomalies_invalid

    @trend_anomalies_invalid.setter
    def trend_anomalies_invalid(self, trend_anomalies_invalid):
        """Sets the trend_anomalies_invalid of this GetInsights.


        :param trend_anomalies_invalid: The trend_anomalies_invalid of this GetInsights.  # noqa: E501
        :type: float
        """
        if trend_anomalies_invalid is None:
            raise ValueError("Invalid value for `trend_anomalies_invalid`, must not be `None`")  # noqa: E501

        self._trend_anomalies_invalid = trend_anomalies_invalid

    @property
    def week_records_profiled(self):
        """Gets the week_records_profiled of this GetInsights.  # noqa: E501


        :return: The week_records_profiled of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_records_profiled

    @week_records_profiled.setter
    def week_records_profiled(self, week_records_profiled):
        """Sets the week_records_profiled of this GetInsights.


        :param week_records_profiled: The week_records_profiled of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_records_profiled is None:
            raise ValueError("Invalid value for `week_records_profiled`, must not be `None`")  # noqa: E501

        self._week_records_profiled = week_records_profiled

    @property
    def week_fields_profiled(self):
        """Gets the week_fields_profiled of this GetInsights.  # noqa: E501


        :return: The week_fields_profiled of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_fields_profiled

    @week_fields_profiled.setter
    def week_fields_profiled(self, week_fields_profiled):
        """Sets the week_fields_profiled of this GetInsights.


        :param week_fields_profiled: The week_fields_profiled of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_fields_profiled is None:
            raise ValueError("Invalid value for `week_fields_profiled`, must not be `None`")  # noqa: E501

        self._week_fields_profiled = week_fields_profiled

    @property
    def week_inferred_checks(self):
        """Gets the week_inferred_checks of this GetInsights.  # noqa: E501


        :return: The week_inferred_checks of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_inferred_checks

    @week_inferred_checks.setter
    def week_inferred_checks(self, week_inferred_checks):
        """Sets the week_inferred_checks of this GetInsights.


        :param week_inferred_checks: The week_inferred_checks of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_inferred_checks is None:
            raise ValueError("Invalid value for `week_inferred_checks`, must not be `None`")  # noqa: E501

        self._week_inferred_checks = week_inferred_checks

    @property
    def week_authored_checks(self):
        """Gets the week_authored_checks of this GetInsights.  # noqa: E501


        :return: The week_authored_checks of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_authored_checks

    @week_authored_checks.setter
    def week_authored_checks(self, week_authored_checks):
        """Sets the week_authored_checks of this GetInsights.


        :param week_authored_checks: The week_authored_checks of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_authored_checks is None:
            raise ValueError("Invalid value for `week_authored_checks`, must not be `None`")  # noqa: E501

        self._week_authored_checks = week_authored_checks

    @property
    def week_sla_monitoring(self):
        """Gets the week_sla_monitoring of this GetInsights.  # noqa: E501


        :return: The week_sla_monitoring of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_sla_monitoring

    @week_sla_monitoring.setter
    def week_sla_monitoring(self, week_sla_monitoring):
        """Sets the week_sla_monitoring of this GetInsights.


        :param week_sla_monitoring: The week_sla_monitoring of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_sla_monitoring is None:
            raise ValueError("Invalid value for `week_sla_monitoring`, must not be `None`")  # noqa: E501

        self._week_sla_monitoring = week_sla_monitoring

    @property
    def week_sla_violations(self):
        """Gets the week_sla_violations of this GetInsights.  # noqa: E501


        :return: The week_sla_violations of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_sla_violations

    @week_sla_violations.setter
    def week_sla_violations(self, week_sla_violations):
        """Sets the week_sla_violations of this GetInsights.


        :param week_sla_violations: The week_sla_violations of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_sla_violations is None:
            raise ValueError("Invalid value for `week_sla_violations`, must not be `None`")  # noqa: E501

        self._week_sla_violations = week_sla_violations

    @property
    def week_records_scanned(self):
        """Gets the week_records_scanned of this GetInsights.  # noqa: E501


        :return: The week_records_scanned of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_records_scanned

    @week_records_scanned.setter
    def week_records_scanned(self, week_records_scanned):
        """Sets the week_records_scanned of this GetInsights.


        :param week_records_scanned: The week_records_scanned of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_records_scanned is None:
            raise ValueError("Invalid value for `week_records_scanned`, must not be `None`")  # noqa: E501

        self._week_records_scanned = week_records_scanned

    @property
    def week_anomalies_identified(self):
        """Gets the week_anomalies_identified of this GetInsights.  # noqa: E501


        :return: The week_anomalies_identified of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_anomalies_identified

    @week_anomalies_identified.setter
    def week_anomalies_identified(self, week_anomalies_identified):
        """Sets the week_anomalies_identified of this GetInsights.


        :param week_anomalies_identified: The week_anomalies_identified of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_anomalies_identified is None:
            raise ValueError("Invalid value for `week_anomalies_identified`, must not be `None`")  # noqa: E501

        self._week_anomalies_identified = week_anomalies_identified

    @property
    def week_anomalies_active(self):
        """Gets the week_anomalies_active of this GetInsights.  # noqa: E501


        :return: The week_anomalies_active of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_anomalies_active

    @week_anomalies_active.setter
    def week_anomalies_active(self, week_anomalies_active):
        """Sets the week_anomalies_active of this GetInsights.


        :param week_anomalies_active: The week_anomalies_active of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_anomalies_active is None:
            raise ValueError("Invalid value for `week_anomalies_active`, must not be `None`")  # noqa: E501

        self._week_anomalies_active = week_anomalies_active

    @property
    def week_anomalies_acknowledged(self):
        """Gets the week_anomalies_acknowledged of this GetInsights.  # noqa: E501


        :return: The week_anomalies_acknowledged of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_anomalies_acknowledged

    @week_anomalies_acknowledged.setter
    def week_anomalies_acknowledged(self, week_anomalies_acknowledged):
        """Sets the week_anomalies_acknowledged of this GetInsights.


        :param week_anomalies_acknowledged: The week_anomalies_acknowledged of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_anomalies_acknowledged is None:
            raise ValueError("Invalid value for `week_anomalies_acknowledged`, must not be `None`")  # noqa: E501

        self._week_anomalies_acknowledged = week_anomalies_acknowledged

    @property
    def week_anomalies_resolved(self):
        """Gets the week_anomalies_resolved of this GetInsights.  # noqa: E501


        :return: The week_anomalies_resolved of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_anomalies_resolved

    @week_anomalies_resolved.setter
    def week_anomalies_resolved(self, week_anomalies_resolved):
        """Sets the week_anomalies_resolved of this GetInsights.


        :param week_anomalies_resolved: The week_anomalies_resolved of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_anomalies_resolved is None:
            raise ValueError("Invalid value for `week_anomalies_resolved`, must not be `None`")  # noqa: E501

        self._week_anomalies_resolved = week_anomalies_resolved

    @property
    def week_anomalies_invalid(self):
        """Gets the week_anomalies_invalid of this GetInsights.  # noqa: E501


        :return: The week_anomalies_invalid of this GetInsights.  # noqa: E501
        :rtype: list[GetInsightsDailyMetric]
        """
        return self._week_anomalies_invalid

    @week_anomalies_invalid.setter
    def week_anomalies_invalid(self, week_anomalies_invalid):
        """Sets the week_anomalies_invalid of this GetInsights.


        :param week_anomalies_invalid: The week_anomalies_invalid of this GetInsights.  # noqa: E501
        :type: list[GetInsightsDailyMetric]
        """
        if week_anomalies_invalid is None:
            raise ValueError("Invalid value for `week_anomalies_invalid`, must not be `None`")  # noqa: E501

        self._week_anomalies_invalid = week_anomalies_invalid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetInsights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetInsights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
