# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetOperationStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_containers': 'int',
        'containers_analyzed': 'int',
        'records_processed': 'int'
    }

    attribute_map = {
        'total_containers': 'total_containers',
        'containers_analyzed': 'containers_analyzed',
        'records_processed': 'records_processed'
    }

    def __init__(self, total_containers=None, containers_analyzed=None, records_processed=None):  # noqa: E501
        """GetOperationStatus - a model defined in Swagger"""  # noqa: E501
        self._total_containers = None
        self._containers_analyzed = None
        self._records_processed = None
        self.discriminator = None
        self.total_containers = total_containers
        self.containers_analyzed = containers_analyzed
        self.records_processed = records_processed

    @property
    def total_containers(self):
        """Gets the total_containers of this GetOperationStatus.  # noqa: E501


        :return: The total_containers of this GetOperationStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_containers

    @total_containers.setter
    def total_containers(self, total_containers):
        """Sets the total_containers of this GetOperationStatus.


        :param total_containers: The total_containers of this GetOperationStatus.  # noqa: E501
        :type: int
        """
        if total_containers is None:
            raise ValueError("Invalid value for `total_containers`, must not be `None`")  # noqa: E501

        self._total_containers = total_containers

    @property
    def containers_analyzed(self):
        """Gets the containers_analyzed of this GetOperationStatus.  # noqa: E501


        :return: The containers_analyzed of this GetOperationStatus.  # noqa: E501
        :rtype: int
        """
        return self._containers_analyzed

    @containers_analyzed.setter
    def containers_analyzed(self, containers_analyzed):
        """Sets the containers_analyzed of this GetOperationStatus.


        :param containers_analyzed: The containers_analyzed of this GetOperationStatus.  # noqa: E501
        :type: int
        """
        if containers_analyzed is None:
            raise ValueError("Invalid value for `containers_analyzed`, must not be `None`")  # noqa: E501

        self._containers_analyzed = containers_analyzed

    @property
    def records_processed(self):
        """Gets the records_processed of this GetOperationStatus.  # noqa: E501


        :return: The records_processed of this GetOperationStatus.  # noqa: E501
        :rtype: int
        """
        return self._records_processed

    @records_processed.setter
    def records_processed(self, records_processed):
        """Sets the records_processed of this GetOperationStatus.


        :param records_processed: The records_processed of this GetOperationStatus.  # noqa: E501
        :type: int
        """
        if records_processed is None:
            raise ValueError("Invalid value for `records_processed`, must not be `None`")  # noqa: E501

        self._records_processed = records_processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOperationStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOperationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
