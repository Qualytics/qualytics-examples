# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetProfileOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'type': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'result': 'str',
        'message': 'str',
        'datastore': 'DatastoreStub',
        'infer_constraints': 'bool',
        'max_records_analyzed_per_partition': 'int',
        'percent_testing_holdout': 'float',
        'histogram_max_distinct_values': 'int',
        'percent_testing_threshold': 'float',
        'high_correlation_threshold': 'float',
        'status': 'GetOperationStatus'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'type': 'type',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'result': 'result',
        'message': 'message',
        'datastore': 'datastore',
        'infer_constraints': 'infer_constraints',
        'max_records_analyzed_per_partition': 'max_records_analyzed_per_partition',
        'percent_testing_holdout': 'percent_testing_holdout',
        'histogram_max_distinct_values': 'histogram_max_distinct_values',
        'percent_testing_threshold': 'percent_testing_threshold',
        'high_correlation_threshold': 'high_correlation_threshold',
        'status': 'status'
    }

    def __init__(self, id=None, created=None, type=None, start_time=None, end_time=None, result=None, message=None, datastore=None, infer_constraints=None, max_records_analyzed_per_partition=None, percent_testing_holdout=None, histogram_max_distinct_values=None, percent_testing_threshold=None, high_correlation_threshold=None, status=None):  # noqa: E501
        """GetProfileOperation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._type = None
        self._start_time = None
        self._end_time = None
        self._result = None
        self._message = None
        self._datastore = None
        self._infer_constraints = None
        self._max_records_analyzed_per_partition = None
        self._percent_testing_holdout = None
        self._histogram_max_distinct_values = None
        self._percent_testing_threshold = None
        self._high_correlation_threshold = None
        self._status = None
        self.discriminator = None
        self.id = id
        self.created = created
        self.type = type
        self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        self.result = result
        if message is not None:
            self.message = message
        self.datastore = datastore
        self.infer_constraints = infer_constraints
        self.max_records_analyzed_per_partition = max_records_analyzed_per_partition
        self.percent_testing_holdout = percent_testing_holdout
        self.histogram_max_distinct_values = histogram_max_distinct_values
        self.percent_testing_threshold = percent_testing_threshold
        self.high_correlation_threshold = high_correlation_threshold
        self.status = status

    @property
    def id(self):
        """Gets the id of this GetProfileOperation.  # noqa: E501


        :return: The id of this GetProfileOperation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetProfileOperation.


        :param id: The id of this GetProfileOperation.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this GetProfileOperation.  # noqa: E501


        :return: The created of this GetProfileOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GetProfileOperation.


        :param created: The created of this GetProfileOperation.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def type(self):
        """Gets the type of this GetProfileOperation.  # noqa: E501


        :return: The type of this GetProfileOperation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetProfileOperation.


        :param type: The type of this GetProfileOperation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["profile"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def start_time(self):
        """Gets the start_time of this GetProfileOperation.  # noqa: E501


        :return: The start_time of this GetProfileOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetProfileOperation.


        :param start_time: The start_time of this GetProfileOperation.  # noqa: E501
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetProfileOperation.  # noqa: E501


        :return: The end_time of this GetProfileOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetProfileOperation.


        :param end_time: The end_time of this GetProfileOperation.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def result(self):
        """Gets the result of this GetProfileOperation.  # noqa: E501


        :return: The result of this GetProfileOperation.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this GetProfileOperation.


        :param result: The result of this GetProfileOperation.  # noqa: E501
        :type: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501
        allowed_values = ["success", "failure", "running", "aborted"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def message(self):
        """Gets the message of this GetProfileOperation.  # noqa: E501


        :return: The message of this GetProfileOperation.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetProfileOperation.


        :param message: The message of this GetProfileOperation.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def datastore(self):
        """Gets the datastore of this GetProfileOperation.  # noqa: E501


        :return: The datastore of this GetProfileOperation.  # noqa: E501
        :rtype: DatastoreStub
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """Sets the datastore of this GetProfileOperation.


        :param datastore: The datastore of this GetProfileOperation.  # noqa: E501
        :type: DatastoreStub
        """
        if datastore is None:
            raise ValueError("Invalid value for `datastore`, must not be `None`")  # noqa: E501

        self._datastore = datastore

    @property
    def infer_constraints(self):
        """Gets the infer_constraints of this GetProfileOperation.  # noqa: E501


        :return: The infer_constraints of this GetProfileOperation.  # noqa: E501
        :rtype: bool
        """
        return self._infer_constraints

    @infer_constraints.setter
    def infer_constraints(self, infer_constraints):
        """Sets the infer_constraints of this GetProfileOperation.


        :param infer_constraints: The infer_constraints of this GetProfileOperation.  # noqa: E501
        :type: bool
        """
        if infer_constraints is None:
            raise ValueError("Invalid value for `infer_constraints`, must not be `None`")  # noqa: E501

        self._infer_constraints = infer_constraints

    @property
    def max_records_analyzed_per_partition(self):
        """Gets the max_records_analyzed_per_partition of this GetProfileOperation.  # noqa: E501


        :return: The max_records_analyzed_per_partition of this GetProfileOperation.  # noqa: E501
        :rtype: int
        """
        return self._max_records_analyzed_per_partition

    @max_records_analyzed_per_partition.setter
    def max_records_analyzed_per_partition(self, max_records_analyzed_per_partition):
        """Sets the max_records_analyzed_per_partition of this GetProfileOperation.


        :param max_records_analyzed_per_partition: The max_records_analyzed_per_partition of this GetProfileOperation.  # noqa: E501
        :type: int
        """
        if max_records_analyzed_per_partition is None:
            raise ValueError("Invalid value for `max_records_analyzed_per_partition`, must not be `None`")  # noqa: E501

        self._max_records_analyzed_per_partition = max_records_analyzed_per_partition

    @property
    def percent_testing_holdout(self):
        """Gets the percent_testing_holdout of this GetProfileOperation.  # noqa: E501


        :return: The percent_testing_holdout of this GetProfileOperation.  # noqa: E501
        :rtype: float
        """
        return self._percent_testing_holdout

    @percent_testing_holdout.setter
    def percent_testing_holdout(self, percent_testing_holdout):
        """Sets the percent_testing_holdout of this GetProfileOperation.


        :param percent_testing_holdout: The percent_testing_holdout of this GetProfileOperation.  # noqa: E501
        :type: float
        """
        if percent_testing_holdout is None:
            raise ValueError("Invalid value for `percent_testing_holdout`, must not be `None`")  # noqa: E501

        self._percent_testing_holdout = percent_testing_holdout

    @property
    def histogram_max_distinct_values(self):
        """Gets the histogram_max_distinct_values of this GetProfileOperation.  # noqa: E501


        :return: The histogram_max_distinct_values of this GetProfileOperation.  # noqa: E501
        :rtype: int
        """
        return self._histogram_max_distinct_values

    @histogram_max_distinct_values.setter
    def histogram_max_distinct_values(self, histogram_max_distinct_values):
        """Sets the histogram_max_distinct_values of this GetProfileOperation.


        :param histogram_max_distinct_values: The histogram_max_distinct_values of this GetProfileOperation.  # noqa: E501
        :type: int
        """
        if histogram_max_distinct_values is None:
            raise ValueError("Invalid value for `histogram_max_distinct_values`, must not be `None`")  # noqa: E501

        self._histogram_max_distinct_values = histogram_max_distinct_values

    @property
    def percent_testing_threshold(self):
        """Gets the percent_testing_threshold of this GetProfileOperation.  # noqa: E501


        :return: The percent_testing_threshold of this GetProfileOperation.  # noqa: E501
        :rtype: float
        """
        return self._percent_testing_threshold

    @percent_testing_threshold.setter
    def percent_testing_threshold(self, percent_testing_threshold):
        """Sets the percent_testing_threshold of this GetProfileOperation.


        :param percent_testing_threshold: The percent_testing_threshold of this GetProfileOperation.  # noqa: E501
        :type: float
        """
        if percent_testing_threshold is None:
            raise ValueError("Invalid value for `percent_testing_threshold`, must not be `None`")  # noqa: E501

        self._percent_testing_threshold = percent_testing_threshold

    @property
    def high_correlation_threshold(self):
        """Gets the high_correlation_threshold of this GetProfileOperation.  # noqa: E501


        :return: The high_correlation_threshold of this GetProfileOperation.  # noqa: E501
        :rtype: float
        """
        return self._high_correlation_threshold

    @high_correlation_threshold.setter
    def high_correlation_threshold(self, high_correlation_threshold):
        """Sets the high_correlation_threshold of this GetProfileOperation.


        :param high_correlation_threshold: The high_correlation_threshold of this GetProfileOperation.  # noqa: E501
        :type: float
        """
        if high_correlation_threshold is None:
            raise ValueError("Invalid value for `high_correlation_threshold`, must not be `None`")  # noqa: E501

        self._high_correlation_threshold = high_correlation_threshold

    @property
    def status(self):
        """Gets the status of this GetProfileOperation.  # noqa: E501


        :return: The status of this GetProfileOperation.  # noqa: E501
        :rtype: GetOperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetProfileOperation.


        :param status: The status of this GetProfileOperation.  # noqa: E501
        :type: GetOperationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProfileOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProfileOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
