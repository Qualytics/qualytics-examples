# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 70366f7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetQualityCheckListing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'fields': 'list[Field]',
        'description': 'str',
        'rule_type': 'RuleType',
        'frequency': 'float',
        'inferred': 'bool',
        'is_new': 'bool',
        'filter': 'str',
        'properties': 'QualityCheckProperties',
        'anomaly_count': 'int',
        'global_tags': 'list[GlobalTag]',
        'store_container': 'StoreContainerStub',
        'favorite': 'bool',
        'last_editor': 'User',
        'importance_score': 'float'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'fields': 'fields',
        'description': 'description',
        'rule_type': 'rule_type',
        'frequency': 'frequency',
        'inferred': 'inferred',
        'is_new': 'is_new',
        'filter': 'filter',
        'properties': 'properties',
        'anomaly_count': 'anomaly_count',
        'global_tags': 'global_tags',
        'store_container': 'store_container',
        'favorite': 'favorite',
        'last_editor': 'last_editor',
        'importance_score': 'importance_score'
    }

    def __init__(self, id=None, created=None, fields=None, description=None, rule_type=None, frequency=None, inferred=None, is_new=None, filter=None, properties=None, anomaly_count=None, global_tags=None, store_container=None, favorite=None, last_editor=None, importance_score=None):  # noqa: E501
        """GetQualityCheckListing - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._fields = None
        self._description = None
        self._rule_type = None
        self._frequency = None
        self._inferred = None
        self._is_new = None
        self._filter = None
        self._properties = None
        self._anomaly_count = None
        self._global_tags = None
        self._store_container = None
        self._favorite = None
        self._last_editor = None
        self._importance_score = None
        self.discriminator = None
        self.id = id
        self.created = created
        if fields is not None:
            self.fields = fields
        if description is not None:
            self.description = description
        self.rule_type = rule_type
        self.frequency = frequency
        self.inferred = inferred
        self.is_new = is_new
        if filter is not None:
            self.filter = filter
        if properties is not None:
            self.properties = properties
        self.anomaly_count = anomaly_count
        if global_tags is not None:
            self.global_tags = global_tags
        self.store_container = store_container
        if favorite is not None:
            self.favorite = favorite
        if last_editor is not None:
            self.last_editor = last_editor
        self.importance_score = importance_score

    @property
    def id(self):
        """Gets the id of this GetQualityCheckListing.  # noqa: E501


        :return: The id of this GetQualityCheckListing.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetQualityCheckListing.


        :param id: The id of this GetQualityCheckListing.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this GetQualityCheckListing.  # noqa: E501


        :return: The created of this GetQualityCheckListing.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GetQualityCheckListing.


        :param created: The created of this GetQualityCheckListing.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def fields(self):
        """Gets the fields of this GetQualityCheckListing.  # noqa: E501


        :return: The fields of this GetQualityCheckListing.  # noqa: E501
        :rtype: list[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this GetQualityCheckListing.


        :param fields: The fields of this GetQualityCheckListing.  # noqa: E501
        :type: list[Field]
        """

        self._fields = fields

    @property
    def description(self):
        """Gets the description of this GetQualityCheckListing.  # noqa: E501


        :return: The description of this GetQualityCheckListing.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetQualityCheckListing.


        :param description: The description of this GetQualityCheckListing.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def rule_type(self):
        """Gets the rule_type of this GetQualityCheckListing.  # noqa: E501


        :return: The rule_type of this GetQualityCheckListing.  # noqa: E501
        :rtype: RuleType
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this GetQualityCheckListing.


        :param rule_type: The rule_type of this GetQualityCheckListing.  # noqa: E501
        :type: RuleType
        """
        if rule_type is None:
            raise ValueError("Invalid value for `rule_type`, must not be `None`")  # noqa: E501

        self._rule_type = rule_type

    @property
    def frequency(self):
        """Gets the frequency of this GetQualityCheckListing.  # noqa: E501


        :return: The frequency of this GetQualityCheckListing.  # noqa: E501
        :rtype: float
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this GetQualityCheckListing.


        :param frequency: The frequency of this GetQualityCheckListing.  # noqa: E501
        :type: float
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501

        self._frequency = frequency

    @property
    def inferred(self):
        """Gets the inferred of this GetQualityCheckListing.  # noqa: E501


        :return: The inferred of this GetQualityCheckListing.  # noqa: E501
        :rtype: bool
        """
        return self._inferred

    @inferred.setter
    def inferred(self, inferred):
        """Sets the inferred of this GetQualityCheckListing.


        :param inferred: The inferred of this GetQualityCheckListing.  # noqa: E501
        :type: bool
        """
        if inferred is None:
            raise ValueError("Invalid value for `inferred`, must not be `None`")  # noqa: E501

        self._inferred = inferred

    @property
    def is_new(self):
        """Gets the is_new of this GetQualityCheckListing.  # noqa: E501


        :return: The is_new of this GetQualityCheckListing.  # noqa: E501
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this GetQualityCheckListing.


        :param is_new: The is_new of this GetQualityCheckListing.  # noqa: E501
        :type: bool
        """
        if is_new is None:
            raise ValueError("Invalid value for `is_new`, must not be `None`")  # noqa: E501

        self._is_new = is_new

    @property
    def filter(self):
        """Gets the filter of this GetQualityCheckListing.  # noqa: E501


        :return: The filter of this GetQualityCheckListing.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GetQualityCheckListing.


        :param filter: The filter of this GetQualityCheckListing.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def properties(self):
        """Gets the properties of this GetQualityCheckListing.  # noqa: E501


        :return: The properties of this GetQualityCheckListing.  # noqa: E501
        :rtype: QualityCheckProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this GetQualityCheckListing.


        :param properties: The properties of this GetQualityCheckListing.  # noqa: E501
        :type: QualityCheckProperties
        """

        self._properties = properties

    @property
    def anomaly_count(self):
        """Gets the anomaly_count of this GetQualityCheckListing.  # noqa: E501


        :return: The anomaly_count of this GetQualityCheckListing.  # noqa: E501
        :rtype: int
        """
        return self._anomaly_count

    @anomaly_count.setter
    def anomaly_count(self, anomaly_count):
        """Sets the anomaly_count of this GetQualityCheckListing.


        :param anomaly_count: The anomaly_count of this GetQualityCheckListing.  # noqa: E501
        :type: int
        """
        if anomaly_count is None:
            raise ValueError("Invalid value for `anomaly_count`, must not be `None`")  # noqa: E501

        self._anomaly_count = anomaly_count

    @property
    def global_tags(self):
        """Gets the global_tags of this GetQualityCheckListing.  # noqa: E501


        :return: The global_tags of this GetQualityCheckListing.  # noqa: E501
        :rtype: list[GlobalTag]
        """
        return self._global_tags

    @global_tags.setter
    def global_tags(self, global_tags):
        """Sets the global_tags of this GetQualityCheckListing.


        :param global_tags: The global_tags of this GetQualityCheckListing.  # noqa: E501
        :type: list[GlobalTag]
        """

        self._global_tags = global_tags

    @property
    def store_container(self):
        """Gets the store_container of this GetQualityCheckListing.  # noqa: E501


        :return: The store_container of this GetQualityCheckListing.  # noqa: E501
        :rtype: StoreContainerStub
        """
        return self._store_container

    @store_container.setter
    def store_container(self, store_container):
        """Sets the store_container of this GetQualityCheckListing.


        :param store_container: The store_container of this GetQualityCheckListing.  # noqa: E501
        :type: StoreContainerStub
        """
        if store_container is None:
            raise ValueError("Invalid value for `store_container`, must not be `None`")  # noqa: E501

        self._store_container = store_container

    @property
    def favorite(self):
        """Gets the favorite of this GetQualityCheckListing.  # noqa: E501


        :return: The favorite of this GetQualityCheckListing.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this GetQualityCheckListing.


        :param favorite: The favorite of this GetQualityCheckListing.  # noqa: E501
        :type: bool
        """

        self._favorite = favorite

    @property
    def last_editor(self):
        """Gets the last_editor of this GetQualityCheckListing.  # noqa: E501


        :return: The last_editor of this GetQualityCheckListing.  # noqa: E501
        :rtype: User
        """
        return self._last_editor

    @last_editor.setter
    def last_editor(self, last_editor):
        """Sets the last_editor of this GetQualityCheckListing.


        :param last_editor: The last_editor of this GetQualityCheckListing.  # noqa: E501
        :type: User
        """

        self._last_editor = last_editor

    @property
    def importance_score(self):
        """Gets the importance_score of this GetQualityCheckListing.  # noqa: E501


        :return: The importance_score of this GetQualityCheckListing.  # noqa: E501
        :rtype: float
        """
        return self._importance_score

    @importance_score.setter
    def importance_score(self, importance_score):
        """Sets the importance_score of this GetQualityCheckListing.


        :param importance_score: The importance_score of this GetQualityCheckListing.  # noqa: E501
        :type: float
        """
        if importance_score is None:
            raise ValueError("Invalid value for `importance_score`, must not be `None`")  # noqa: E501

        self._importance_score = importance_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetQualityCheckListing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetQualityCheckListing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
