# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetScanOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'type': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'result': 'str',
        'message': 'str',
        'datastore': 'DatastoreStub',
        'incremental': 'bool',
        'remediation': 'str',
        'max_records_analyzed_per_partition': 'int',
        'status': 'GetScanOperationStatus'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'type': 'type',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'result': 'result',
        'message': 'message',
        'datastore': 'datastore',
        'incremental': 'incremental',
        'remediation': 'remediation',
        'max_records_analyzed_per_partition': 'max_records_analyzed_per_partition',
        'status': 'status'
    }

    def __init__(self, id=None, created=None, type=None, start_time=None, end_time=None, result=None, message=None, datastore=None, incremental=None, remediation=None, max_records_analyzed_per_partition=None, status=None):  # noqa: E501
        """GetScanOperation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._type = None
        self._start_time = None
        self._end_time = None
        self._result = None
        self._message = None
        self._datastore = None
        self._incremental = None
        self._remediation = None
        self._max_records_analyzed_per_partition = None
        self._status = None
        self.discriminator = None
        self.id = id
        self.created = created
        self.type = type
        self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        self.result = result
        if message is not None:
            self.message = message
        self.datastore = datastore
        self.incremental = incremental
        self.remediation = remediation
        self.max_records_analyzed_per_partition = max_records_analyzed_per_partition
        self.status = status

    @property
    def id(self):
        """Gets the id of this GetScanOperation.  # noqa: E501


        :return: The id of this GetScanOperation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetScanOperation.


        :param id: The id of this GetScanOperation.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this GetScanOperation.  # noqa: E501


        :return: The created of this GetScanOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this GetScanOperation.


        :param created: The created of this GetScanOperation.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def type(self):
        """Gets the type of this GetScanOperation.  # noqa: E501


        :return: The type of this GetScanOperation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetScanOperation.


        :param type: The type of this GetScanOperation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["scan"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def start_time(self):
        """Gets the start_time of this GetScanOperation.  # noqa: E501


        :return: The start_time of this GetScanOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetScanOperation.


        :param start_time: The start_time of this GetScanOperation.  # noqa: E501
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetScanOperation.  # noqa: E501


        :return: The end_time of this GetScanOperation.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetScanOperation.


        :param end_time: The end_time of this GetScanOperation.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def result(self):
        """Gets the result of this GetScanOperation.  # noqa: E501


        :return: The result of this GetScanOperation.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this GetScanOperation.


        :param result: The result of this GetScanOperation.  # noqa: E501
        :type: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501
        allowed_values = ["success", "failure", "running", "aborted"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def message(self):
        """Gets the message of this GetScanOperation.  # noqa: E501


        :return: The message of this GetScanOperation.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetScanOperation.


        :param message: The message of this GetScanOperation.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def datastore(self):
        """Gets the datastore of this GetScanOperation.  # noqa: E501


        :return: The datastore of this GetScanOperation.  # noqa: E501
        :rtype: DatastoreStub
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """Sets the datastore of this GetScanOperation.


        :param datastore: The datastore of this GetScanOperation.  # noqa: E501
        :type: DatastoreStub
        """
        if datastore is None:
            raise ValueError("Invalid value for `datastore`, must not be `None`")  # noqa: E501

        self._datastore = datastore

    @property
    def incremental(self):
        """Gets the incremental of this GetScanOperation.  # noqa: E501


        :return: The incremental of this GetScanOperation.  # noqa: E501
        :rtype: bool
        """
        return self._incremental

    @incremental.setter
    def incremental(self, incremental):
        """Sets the incremental of this GetScanOperation.


        :param incremental: The incremental of this GetScanOperation.  # noqa: E501
        :type: bool
        """
        if incremental is None:
            raise ValueError("Invalid value for `incremental`, must not be `None`")  # noqa: E501

        self._incremental = incremental

    @property
    def remediation(self):
        """Gets the remediation of this GetScanOperation.  # noqa: E501


        :return: The remediation of this GetScanOperation.  # noqa: E501
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this GetScanOperation.


        :param remediation: The remediation of this GetScanOperation.  # noqa: E501
        :type: str
        """
        if remediation is None:
            raise ValueError("Invalid value for `remediation`, must not be `None`")  # noqa: E501
        allowed_values = ["none", "append", "overwrite"]  # noqa: E501
        if remediation not in allowed_values:
            raise ValueError(
                "Invalid value for `remediation` ({0}), must be one of {1}"  # noqa: E501
                .format(remediation, allowed_values)
            )

        self._remediation = remediation

    @property
    def max_records_analyzed_per_partition(self):
        """Gets the max_records_analyzed_per_partition of this GetScanOperation.  # noqa: E501


        :return: The max_records_analyzed_per_partition of this GetScanOperation.  # noqa: E501
        :rtype: int
        """
        return self._max_records_analyzed_per_partition

    @max_records_analyzed_per_partition.setter
    def max_records_analyzed_per_partition(self, max_records_analyzed_per_partition):
        """Sets the max_records_analyzed_per_partition of this GetScanOperation.


        :param max_records_analyzed_per_partition: The max_records_analyzed_per_partition of this GetScanOperation.  # noqa: E501
        :type: int
        """
        if max_records_analyzed_per_partition is None:
            raise ValueError("Invalid value for `max_records_analyzed_per_partition`, must not be `None`")  # noqa: E501

        self._max_records_analyzed_per_partition = max_records_analyzed_per_partition

    @property
    def status(self):
        """Gets the status of this GetScanOperation.  # noqa: E501


        :return: The status of this GetScanOperation.  # noqa: E501
        :rtype: GetScanOperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetScanOperation.


        :param status: The status of this GetScanOperation.  # noqa: E501
        :type: GetScanOperationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetScanOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetScanOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
