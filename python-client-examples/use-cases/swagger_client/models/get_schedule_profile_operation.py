# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetScheduleProfileOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'crontab': 'str',
        'next_trigger': 'str',
        'type': 'str',
        'datastore': 'DatastoreStub',
        'infer_constraints': 'bool',
        'max_records_analyzed_per_partition': 'int',
        'percent_testing_holdout': 'float',
        'histogram_max_distinct_values': 'int',
        'percent_testing_threshold': 'float',
        'high_correlation_threshold': 'float',
        'containers': 'list[ContainerStub]'
    }

    attribute_map = {
        'id': 'id',
        'crontab': 'crontab',
        'next_trigger': 'next_trigger',
        'type': 'type',
        'datastore': 'datastore',
        'infer_constraints': 'infer_constraints',
        'max_records_analyzed_per_partition': 'max_records_analyzed_per_partition',
        'percent_testing_holdout': 'percent_testing_holdout',
        'histogram_max_distinct_values': 'histogram_max_distinct_values',
        'percent_testing_threshold': 'percent_testing_threshold',
        'high_correlation_threshold': 'high_correlation_threshold',
        'containers': 'containers'
    }

    def __init__(self, id=None, crontab=None, next_trigger=None, type=None, datastore=None, infer_constraints=None, max_records_analyzed_per_partition=None, percent_testing_holdout=None, histogram_max_distinct_values=None, percent_testing_threshold=None, high_correlation_threshold=None, containers=None):  # noqa: E501
        """GetScheduleProfileOperation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._crontab = None
        self._next_trigger = None
        self._type = None
        self._datastore = None
        self._infer_constraints = None
        self._max_records_analyzed_per_partition = None
        self._percent_testing_holdout = None
        self._histogram_max_distinct_values = None
        self._percent_testing_threshold = None
        self._high_correlation_threshold = None
        self._containers = None
        self.discriminator = None
        self.id = id
        if crontab is not None:
            self.crontab = crontab
        if next_trigger is not None:
            self.next_trigger = next_trigger
        self.type = type
        self.datastore = datastore
        self.infer_constraints = infer_constraints
        self.max_records_analyzed_per_partition = max_records_analyzed_per_partition
        self.percent_testing_holdout = percent_testing_holdout
        self.histogram_max_distinct_values = histogram_max_distinct_values
        self.percent_testing_threshold = percent_testing_threshold
        self.high_correlation_threshold = high_correlation_threshold
        self.containers = containers

    @property
    def id(self):
        """Gets the id of this GetScheduleProfileOperation.  # noqa: E501


        :return: The id of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetScheduleProfileOperation.


        :param id: The id of this GetScheduleProfileOperation.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def crontab(self):
        """Gets the crontab of this GetScheduleProfileOperation.  # noqa: E501


        :return: The crontab of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: str
        """
        return self._crontab

    @crontab.setter
    def crontab(self, crontab):
        """Sets the crontab of this GetScheduleProfileOperation.


        :param crontab: The crontab of this GetScheduleProfileOperation.  # noqa: E501
        :type: str
        """

        self._crontab = crontab

    @property
    def next_trigger(self):
        """Gets the next_trigger of this GetScheduleProfileOperation.  # noqa: E501


        :return: The next_trigger of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: str
        """
        return self._next_trigger

    @next_trigger.setter
    def next_trigger(self, next_trigger):
        """Sets the next_trigger of this GetScheduleProfileOperation.


        :param next_trigger: The next_trigger of this GetScheduleProfileOperation.  # noqa: E501
        :type: str
        """

        self._next_trigger = next_trigger

    @property
    def type(self):
        """Gets the type of this GetScheduleProfileOperation.  # noqa: E501


        :return: The type of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetScheduleProfileOperation.


        :param type: The type of this GetScheduleProfileOperation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["profile"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def datastore(self):
        """Gets the datastore of this GetScheduleProfileOperation.  # noqa: E501


        :return: The datastore of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: DatastoreStub
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """Sets the datastore of this GetScheduleProfileOperation.


        :param datastore: The datastore of this GetScheduleProfileOperation.  # noqa: E501
        :type: DatastoreStub
        """
        if datastore is None:
            raise ValueError("Invalid value for `datastore`, must not be `None`")  # noqa: E501

        self._datastore = datastore

    @property
    def infer_constraints(self):
        """Gets the infer_constraints of this GetScheduleProfileOperation.  # noqa: E501


        :return: The infer_constraints of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: bool
        """
        return self._infer_constraints

    @infer_constraints.setter
    def infer_constraints(self, infer_constraints):
        """Sets the infer_constraints of this GetScheduleProfileOperation.


        :param infer_constraints: The infer_constraints of this GetScheduleProfileOperation.  # noqa: E501
        :type: bool
        """
        if infer_constraints is None:
            raise ValueError("Invalid value for `infer_constraints`, must not be `None`")  # noqa: E501

        self._infer_constraints = infer_constraints

    @property
    def max_records_analyzed_per_partition(self):
        """Gets the max_records_analyzed_per_partition of this GetScheduleProfileOperation.  # noqa: E501


        :return: The max_records_analyzed_per_partition of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: int
        """
        return self._max_records_analyzed_per_partition

    @max_records_analyzed_per_partition.setter
    def max_records_analyzed_per_partition(self, max_records_analyzed_per_partition):
        """Sets the max_records_analyzed_per_partition of this GetScheduleProfileOperation.


        :param max_records_analyzed_per_partition: The max_records_analyzed_per_partition of this GetScheduleProfileOperation.  # noqa: E501
        :type: int
        """
        if max_records_analyzed_per_partition is None:
            raise ValueError("Invalid value for `max_records_analyzed_per_partition`, must not be `None`")  # noqa: E501

        self._max_records_analyzed_per_partition = max_records_analyzed_per_partition

    @property
    def percent_testing_holdout(self):
        """Gets the percent_testing_holdout of this GetScheduleProfileOperation.  # noqa: E501


        :return: The percent_testing_holdout of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: float
        """
        return self._percent_testing_holdout

    @percent_testing_holdout.setter
    def percent_testing_holdout(self, percent_testing_holdout):
        """Sets the percent_testing_holdout of this GetScheduleProfileOperation.


        :param percent_testing_holdout: The percent_testing_holdout of this GetScheduleProfileOperation.  # noqa: E501
        :type: float
        """
        if percent_testing_holdout is None:
            raise ValueError("Invalid value for `percent_testing_holdout`, must not be `None`")  # noqa: E501

        self._percent_testing_holdout = percent_testing_holdout

    @property
    def histogram_max_distinct_values(self):
        """Gets the histogram_max_distinct_values of this GetScheduleProfileOperation.  # noqa: E501


        :return: The histogram_max_distinct_values of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: int
        """
        return self._histogram_max_distinct_values

    @histogram_max_distinct_values.setter
    def histogram_max_distinct_values(self, histogram_max_distinct_values):
        """Sets the histogram_max_distinct_values of this GetScheduleProfileOperation.


        :param histogram_max_distinct_values: The histogram_max_distinct_values of this GetScheduleProfileOperation.  # noqa: E501
        :type: int
        """
        if histogram_max_distinct_values is None:
            raise ValueError("Invalid value for `histogram_max_distinct_values`, must not be `None`")  # noqa: E501

        self._histogram_max_distinct_values = histogram_max_distinct_values

    @property
    def percent_testing_threshold(self):
        """Gets the percent_testing_threshold of this GetScheduleProfileOperation.  # noqa: E501


        :return: The percent_testing_threshold of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: float
        """
        return self._percent_testing_threshold

    @percent_testing_threshold.setter
    def percent_testing_threshold(self, percent_testing_threshold):
        """Sets the percent_testing_threshold of this GetScheduleProfileOperation.


        :param percent_testing_threshold: The percent_testing_threshold of this GetScheduleProfileOperation.  # noqa: E501
        :type: float
        """
        if percent_testing_threshold is None:
            raise ValueError("Invalid value for `percent_testing_threshold`, must not be `None`")  # noqa: E501

        self._percent_testing_threshold = percent_testing_threshold

    @property
    def high_correlation_threshold(self):
        """Gets the high_correlation_threshold of this GetScheduleProfileOperation.  # noqa: E501


        :return: The high_correlation_threshold of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: float
        """
        return self._high_correlation_threshold

    @high_correlation_threshold.setter
    def high_correlation_threshold(self, high_correlation_threshold):
        """Sets the high_correlation_threshold of this GetScheduleProfileOperation.


        :param high_correlation_threshold: The high_correlation_threshold of this GetScheduleProfileOperation.  # noqa: E501
        :type: float
        """
        if high_correlation_threshold is None:
            raise ValueError("Invalid value for `high_correlation_threshold`, must not be `None`")  # noqa: E501

        self._high_correlation_threshold = high_correlation_threshold

    @property
    def containers(self):
        """Gets the containers of this GetScheduleProfileOperation.  # noqa: E501


        :return: The containers of this GetScheduleProfileOperation.  # noqa: E501
        :rtype: list[ContainerStub]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this GetScheduleProfileOperation.


        :param containers: The containers of this GetScheduleProfileOperation.  # noqa: E501
        :type: list[ContainerStub]
        """
        if containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")  # noqa: E501

        self._containers = containers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetScheduleProfileOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetScheduleProfileOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
