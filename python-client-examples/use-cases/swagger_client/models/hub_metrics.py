# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HubMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_records_scanned': 'int',
        'total_anomalies_caught': 'int',
        'records_scanned': 'list[object]',
        'anomalies_caught': 'list[object]'
    }

    attribute_map = {
        'total_records_scanned': 'total_records_scanned',
        'total_anomalies_caught': 'total_anomalies_caught',
        'records_scanned': 'records_scanned',
        'anomalies_caught': 'anomalies_caught'
    }

    def __init__(self, total_records_scanned=None, total_anomalies_caught=None, records_scanned=None, anomalies_caught=None):  # noqa: E501
        """HubMetrics - a model defined in Swagger"""  # noqa: E501
        self._total_records_scanned = None
        self._total_anomalies_caught = None
        self._records_scanned = None
        self._anomalies_caught = None
        self.discriminator = None
        self.total_records_scanned = total_records_scanned
        self.total_anomalies_caught = total_anomalies_caught
        self.records_scanned = records_scanned
        self.anomalies_caught = anomalies_caught

    @property
    def total_records_scanned(self):
        """Gets the total_records_scanned of this HubMetrics.  # noqa: E501


        :return: The total_records_scanned of this HubMetrics.  # noqa: E501
        :rtype: int
        """
        return self._total_records_scanned

    @total_records_scanned.setter
    def total_records_scanned(self, total_records_scanned):
        """Sets the total_records_scanned of this HubMetrics.


        :param total_records_scanned: The total_records_scanned of this HubMetrics.  # noqa: E501
        :type: int
        """
        if total_records_scanned is None:
            raise ValueError("Invalid value for `total_records_scanned`, must not be `None`")  # noqa: E501

        self._total_records_scanned = total_records_scanned

    @property
    def total_anomalies_caught(self):
        """Gets the total_anomalies_caught of this HubMetrics.  # noqa: E501


        :return: The total_anomalies_caught of this HubMetrics.  # noqa: E501
        :rtype: int
        """
        return self._total_anomalies_caught

    @total_anomalies_caught.setter
    def total_anomalies_caught(self, total_anomalies_caught):
        """Sets the total_anomalies_caught of this HubMetrics.


        :param total_anomalies_caught: The total_anomalies_caught of this HubMetrics.  # noqa: E501
        :type: int
        """
        if total_anomalies_caught is None:
            raise ValueError("Invalid value for `total_anomalies_caught`, must not be `None`")  # noqa: E501

        self._total_anomalies_caught = total_anomalies_caught

    @property
    def records_scanned(self):
        """Gets the records_scanned of this HubMetrics.  # noqa: E501


        :return: The records_scanned of this HubMetrics.  # noqa: E501
        :rtype: list[object]
        """
        return self._records_scanned

    @records_scanned.setter
    def records_scanned(self, records_scanned):
        """Sets the records_scanned of this HubMetrics.


        :param records_scanned: The records_scanned of this HubMetrics.  # noqa: E501
        :type: list[object]
        """
        if records_scanned is None:
            raise ValueError("Invalid value for `records_scanned`, must not be `None`")  # noqa: E501

        self._records_scanned = records_scanned

    @property
    def anomalies_caught(self):
        """Gets the anomalies_caught of this HubMetrics.  # noqa: E501


        :return: The anomalies_caught of this HubMetrics.  # noqa: E501
        :rtype: list[object]
        """
        return self._anomalies_caught

    @anomalies_caught.setter
    def anomalies_caught(self, anomalies_caught):
        """Sets the anomalies_caught of this HubMetrics.


        :param anomalies_caught: The anomalies_caught of this HubMetrics.  # noqa: E501
        :type: list[object]
        """
        if anomalies_caught is None:
            raise ValueError("Invalid value for `anomalies_caught`, must not be `None`")  # noqa: E501

        self._anomalies_caught = anomalies_caught

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HubMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HubMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
