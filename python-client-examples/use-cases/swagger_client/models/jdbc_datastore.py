# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JdbcDatastore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'store_type': 'str',
        'type': 'str',
        'name': 'str',
        'connected': 'bool',
        'latest_operation': 'Operation',
        'enrich_only': 'bool',
        'enrich_container_prefix': 'str',
        'enrich_datastore': 'DatastoreStub',
        'metrics': 'DatastoreMetrics',
        'global_tags': 'list[GlobalTag]',
        'host': 'str',
        'port': 'int',
        'database': 'str',
        'schema': 'str',
        'username': 'str',
        'password': 'str',
        'parameters': 'object',
        'product_name': 'str',
        'product_version': 'str',
        'driver_name': 'str',
        'driver_version': 'str',
        'jdbc_url': 'str',
        'containers': 'list[AnyOfJdbcDatastoreContainersItems]'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'store_type': 'store_type',
        'type': 'type',
        'name': 'name',
        'connected': 'connected',
        'latest_operation': 'latest_operation',
        'enrich_only': 'enrich_only',
        'enrich_container_prefix': 'enrich_container_prefix',
        'enrich_datastore': 'enrich_datastore',
        'metrics': 'metrics',
        'global_tags': 'global_tags',
        'host': 'host',
        'port': 'port',
        'database': 'database',
        'schema': 'schema',
        'username': 'username',
        'password': 'password',
        'parameters': 'parameters',
        'product_name': 'product_name',
        'product_version': 'product_version',
        'driver_name': 'driver_name',
        'driver_version': 'driver_version',
        'jdbc_url': 'jdbc_url',
        'containers': 'containers'
    }

    def __init__(self, id=None, created=None, store_type=None, type=None, name=None, connected=None, latest_operation=None, enrich_only=None, enrich_container_prefix=None, enrich_datastore=None, metrics=None, global_tags=None, host=None, port=None, database=None, schema=None, username=None, password=None, parameters=None, product_name=None, product_version=None, driver_name=None, driver_version=None, jdbc_url=None, containers=None):  # noqa: E501
        """JdbcDatastore - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._store_type = None
        self._type = None
        self._name = None
        self._connected = None
        self._latest_operation = None
        self._enrich_only = None
        self._enrich_container_prefix = None
        self._enrich_datastore = None
        self._metrics = None
        self._global_tags = None
        self._host = None
        self._port = None
        self._database = None
        self._schema = None
        self._username = None
        self._password = None
        self._parameters = None
        self._product_name = None
        self._product_version = None
        self._driver_name = None
        self._driver_version = None
        self._jdbc_url = None
        self._containers = None
        self.discriminator = None
        self.id = id
        self.created = created
        self.store_type = store_type
        self.type = type
        self.name = name
        if connected is not None:
            self.connected = connected
        if latest_operation is not None:
            self.latest_operation = latest_operation
        self.enrich_only = enrich_only
        self.enrich_container_prefix = enrich_container_prefix
        if enrich_datastore is not None:
            self.enrich_datastore = enrich_datastore
        self.metrics = metrics
        if global_tags is not None:
            self.global_tags = global_tags
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if database is not None:
            self.database = database
        if schema is not None:
            self.schema = schema
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if parameters is not None:
            self.parameters = parameters
        if product_name is not None:
            self.product_name = product_name
        if product_version is not None:
            self.product_version = product_version
        if driver_name is not None:
            self.driver_name = driver_name
        if driver_version is not None:
            self.driver_version = driver_version
        self.jdbc_url = jdbc_url
        if containers is not None:
            self.containers = containers

    @property
    def id(self):
        """Gets the id of this JdbcDatastore.  # noqa: E501


        :return: The id of this JdbcDatastore.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JdbcDatastore.


        :param id: The id of this JdbcDatastore.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this JdbcDatastore.  # noqa: E501


        :return: The created of this JdbcDatastore.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JdbcDatastore.


        :param created: The created of this JdbcDatastore.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def store_type(self):
        """Gets the store_type of this JdbcDatastore.  # noqa: E501


        :return: The store_type of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type):
        """Sets the store_type of this JdbcDatastore.


        :param store_type: The store_type of this JdbcDatastore.  # noqa: E501
        :type: str
        """
        if store_type is None:
            raise ValueError("Invalid value for `store_type`, must not be `None`")  # noqa: E501
        allowed_values = ["jdbc", "dfs", "qfs"]  # noqa: E501
        if store_type not in allowed_values:
            raise ValueError(
                "Invalid value for `store_type` ({0}), must be one of {1}"  # noqa: E501
                .format(store_type, allowed_values)
            )

        self._store_type = store_type

    @property
    def type(self):
        """Gets the type of this JdbcDatastore.  # noqa: E501


        :return: The type of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JdbcDatastore.


        :param type: The type of this JdbcDatastore.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["postgresql", "mysql", "sqlserver", "oracle", "snowflake", "redshift", "bigquery", "databricks", "synapse", "mariadb", "s3", "gcs", "wasb", "abfs", "qfs"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this JdbcDatastore.  # noqa: E501


        :return: The name of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JdbcDatastore.


        :param name: The name of this JdbcDatastore.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def connected(self):
        """Gets the connected of this JdbcDatastore.  # noqa: E501


        :return: The connected of this JdbcDatastore.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this JdbcDatastore.


        :param connected: The connected of this JdbcDatastore.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def latest_operation(self):
        """Gets the latest_operation of this JdbcDatastore.  # noqa: E501


        :return: The latest_operation of this JdbcDatastore.  # noqa: E501
        :rtype: Operation
        """
        return self._latest_operation

    @latest_operation.setter
    def latest_operation(self, latest_operation):
        """Sets the latest_operation of this JdbcDatastore.


        :param latest_operation: The latest_operation of this JdbcDatastore.  # noqa: E501
        :type: Operation
        """

        self._latest_operation = latest_operation

    @property
    def enrich_only(self):
        """Gets the enrich_only of this JdbcDatastore.  # noqa: E501


        :return: The enrich_only of this JdbcDatastore.  # noqa: E501
        :rtype: bool
        """
        return self._enrich_only

    @enrich_only.setter
    def enrich_only(self, enrich_only):
        """Sets the enrich_only of this JdbcDatastore.


        :param enrich_only: The enrich_only of this JdbcDatastore.  # noqa: E501
        :type: bool
        """
        if enrich_only is None:
            raise ValueError("Invalid value for `enrich_only`, must not be `None`")  # noqa: E501

        self._enrich_only = enrich_only

    @property
    def enrich_container_prefix(self):
        """Gets the enrich_container_prefix of this JdbcDatastore.  # noqa: E501


        :return: The enrich_container_prefix of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._enrich_container_prefix

    @enrich_container_prefix.setter
    def enrich_container_prefix(self, enrich_container_prefix):
        """Sets the enrich_container_prefix of this JdbcDatastore.


        :param enrich_container_prefix: The enrich_container_prefix of this JdbcDatastore.  # noqa: E501
        :type: str
        """
        if enrich_container_prefix is None:
            raise ValueError("Invalid value for `enrich_container_prefix`, must not be `None`")  # noqa: E501

        self._enrich_container_prefix = enrich_container_prefix

    @property
    def enrich_datastore(self):
        """Gets the enrich_datastore of this JdbcDatastore.  # noqa: E501


        :return: The enrich_datastore of this JdbcDatastore.  # noqa: E501
        :rtype: DatastoreStub
        """
        return self._enrich_datastore

    @enrich_datastore.setter
    def enrich_datastore(self, enrich_datastore):
        """Sets the enrich_datastore of this JdbcDatastore.


        :param enrich_datastore: The enrich_datastore of this JdbcDatastore.  # noqa: E501
        :type: DatastoreStub
        """

        self._enrich_datastore = enrich_datastore

    @property
    def metrics(self):
        """Gets the metrics of this JdbcDatastore.  # noqa: E501


        :return: The metrics of this JdbcDatastore.  # noqa: E501
        :rtype: DatastoreMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this JdbcDatastore.


        :param metrics: The metrics of this JdbcDatastore.  # noqa: E501
        :type: DatastoreMetrics
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    @property
    def global_tags(self):
        """Gets the global_tags of this JdbcDatastore.  # noqa: E501


        :return: The global_tags of this JdbcDatastore.  # noqa: E501
        :rtype: list[GlobalTag]
        """
        return self._global_tags

    @global_tags.setter
    def global_tags(self, global_tags):
        """Sets the global_tags of this JdbcDatastore.


        :param global_tags: The global_tags of this JdbcDatastore.  # noqa: E501
        :type: list[GlobalTag]
        """

        self._global_tags = global_tags

    @property
    def host(self):
        """Gets the host of this JdbcDatastore.  # noqa: E501


        :return: The host of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this JdbcDatastore.


        :param host: The host of this JdbcDatastore.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this JdbcDatastore.  # noqa: E501


        :return: The port of this JdbcDatastore.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this JdbcDatastore.


        :param port: The port of this JdbcDatastore.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def database(self):
        """Gets the database of this JdbcDatastore.  # noqa: E501


        :return: The database of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this JdbcDatastore.


        :param database: The database of this JdbcDatastore.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def schema(self):
        """Gets the schema of this JdbcDatastore.  # noqa: E501


        :return: The schema of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this JdbcDatastore.


        :param schema: The schema of this JdbcDatastore.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def username(self):
        """Gets the username of this JdbcDatastore.  # noqa: E501


        :return: The username of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this JdbcDatastore.


        :param username: The username of this JdbcDatastore.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this JdbcDatastore.  # noqa: E501


        :return: The password of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this JdbcDatastore.


        :param password: The password of this JdbcDatastore.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def parameters(self):
        """Gets the parameters of this JdbcDatastore.  # noqa: E501


        :return: The parameters of this JdbcDatastore.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this JdbcDatastore.


        :param parameters: The parameters of this JdbcDatastore.  # noqa: E501
        :type: object
        """

        self._parameters = parameters

    @property
    def product_name(self):
        """Gets the product_name of this JdbcDatastore.  # noqa: E501


        :return: The product_name of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this JdbcDatastore.


        :param product_name: The product_name of this JdbcDatastore.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_version(self):
        """Gets the product_version of this JdbcDatastore.  # noqa: E501


        :return: The product_version of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._product_version

    @product_version.setter
    def product_version(self, product_version):
        """Sets the product_version of this JdbcDatastore.


        :param product_version: The product_version of this JdbcDatastore.  # noqa: E501
        :type: str
        """

        self._product_version = product_version

    @property
    def driver_name(self):
        """Gets the driver_name of this JdbcDatastore.  # noqa: E501


        :return: The driver_name of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this JdbcDatastore.


        :param driver_name: The driver_name of this JdbcDatastore.  # noqa: E501
        :type: str
        """

        self._driver_name = driver_name

    @property
    def driver_version(self):
        """Gets the driver_version of this JdbcDatastore.  # noqa: E501


        :return: The driver_version of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._driver_version

    @driver_version.setter
    def driver_version(self, driver_version):
        """Sets the driver_version of this JdbcDatastore.


        :param driver_version: The driver_version of this JdbcDatastore.  # noqa: E501
        :type: str
        """

        self._driver_version = driver_version

    @property
    def jdbc_url(self):
        """Gets the jdbc_url of this JdbcDatastore.  # noqa: E501


        :return: The jdbc_url of this JdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._jdbc_url

    @jdbc_url.setter
    def jdbc_url(self, jdbc_url):
        """Sets the jdbc_url of this JdbcDatastore.


        :param jdbc_url: The jdbc_url of this JdbcDatastore.  # noqa: E501
        :type: str
        """
        if jdbc_url is None:
            raise ValueError("Invalid value for `jdbc_url`, must not be `None`")  # noqa: E501

        self._jdbc_url = jdbc_url

    @property
    def containers(self):
        """Gets the containers of this JdbcDatastore.  # noqa: E501


        :return: The containers of this JdbcDatastore.  # noqa: E501
        :rtype: list[AnyOfJdbcDatastoreContainersItems]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this JdbcDatastore.


        :param containers: The containers of this JdbcDatastore.  # noqa: E501
        :type: list[AnyOfJdbcDatastoreContainersItems]
        """

        self._containers = containers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JdbcDatastore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JdbcDatastore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
