# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 70366f7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'name': 'str',
        'description': 'str',
        'trigger_type': 'TriggerType',
        'tokenized_message': 'str',
        'receivers': 'list[NotificationReceiver]',
        'teams': 'list[Team]',
        'global_tags': 'list[GlobalTag]'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'name': 'name',
        'description': 'description',
        'trigger_type': 'trigger_type',
        'tokenized_message': 'tokenized_message',
        'receivers': 'receivers',
        'teams': 'teams',
        'global_tags': 'global_tags'
    }

    def __init__(self, id=None, created=None, name=None, description=None, trigger_type=None, tokenized_message=None, receivers=None, teams=None, global_tags=None):  # noqa: E501
        """NotificationRule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._name = None
        self._description = None
        self._trigger_type = None
        self._tokenized_message = None
        self._receivers = None
        self._teams = None
        self._global_tags = None
        self.discriminator = None
        self.id = id
        self.created = created
        self.name = name
        if description is not None:
            self.description = description
        self.trigger_type = trigger_type
        self.tokenized_message = tokenized_message
        if receivers is not None:
            self.receivers = receivers
        if teams is not None:
            self.teams = teams
        if global_tags is not None:
            self.global_tags = global_tags

    @property
    def id(self):
        """Gets the id of this NotificationRule.  # noqa: E501


        :return: The id of this NotificationRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationRule.


        :param id: The id of this NotificationRule.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this NotificationRule.  # noqa: E501


        :return: The created of this NotificationRule.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NotificationRule.


        :param created: The created of this NotificationRule.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def name(self):
        """Gets the name of this NotificationRule.  # noqa: E501


        :return: The name of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationRule.


        :param name: The name of this NotificationRule.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this NotificationRule.  # noqa: E501


        :return: The description of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationRule.


        :param description: The description of this NotificationRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def trigger_type(self):
        """Gets the trigger_type of this NotificationRule.  # noqa: E501


        :return: The trigger_type of this NotificationRule.  # noqa: E501
        :rtype: TriggerType
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this NotificationRule.


        :param trigger_type: The trigger_type of this NotificationRule.  # noqa: E501
        :type: TriggerType
        """
        if trigger_type is None:
            raise ValueError("Invalid value for `trigger_type`, must not be `None`")  # noqa: E501

        self._trigger_type = trigger_type

    @property
    def tokenized_message(self):
        """Gets the tokenized_message of this NotificationRule.  # noqa: E501


        :return: The tokenized_message of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._tokenized_message

    @tokenized_message.setter
    def tokenized_message(self, tokenized_message):
        """Sets the tokenized_message of this NotificationRule.


        :param tokenized_message: The tokenized_message of this NotificationRule.  # noqa: E501
        :type: str
        """
        if tokenized_message is None:
            raise ValueError("Invalid value for `tokenized_message`, must not be `None`")  # noqa: E501

        self._tokenized_message = tokenized_message

    @property
    def receivers(self):
        """Gets the receivers of this NotificationRule.  # noqa: E501


        :return: The receivers of this NotificationRule.  # noqa: E501
        :rtype: list[NotificationReceiver]
        """
        return self._receivers

    @receivers.setter
    def receivers(self, receivers):
        """Sets the receivers of this NotificationRule.


        :param receivers: The receivers of this NotificationRule.  # noqa: E501
        :type: list[NotificationReceiver]
        """

        self._receivers = receivers

    @property
    def teams(self):
        """Gets the teams of this NotificationRule.  # noqa: E501


        :return: The teams of this NotificationRule.  # noqa: E501
        :rtype: list[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this NotificationRule.


        :param teams: The teams of this NotificationRule.  # noqa: E501
        :type: list[Team]
        """

        self._teams = teams

    @property
    def global_tags(self):
        """Gets the global_tags of this NotificationRule.  # noqa: E501


        :return: The global_tags of this NotificationRule.  # noqa: E501
        :rtype: list[GlobalTag]
        """
        return self._global_tags

    @global_tags.setter
    def global_tags(self, global_tags):
        """Sets the global_tags of this NotificationRule.


        :param global_tags: The global_tags of this NotificationRule.  # noqa: E501
        :type: list[GlobalTag]
        """

        self._global_tags = global_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
