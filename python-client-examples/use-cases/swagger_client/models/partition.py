# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Partition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'name': 'str',
        'location': 'str',
        'min_offset': 'float',
        'max_offset': 'float',
        'min_time': 'datetime',
        'max_time': 'datetime',
        'partition_size': 'int',
        'global_tags': 'list[GlobalTag]',
        'comments': 'list[Comment]',
        'num_active': 'int',
        'num_invalid': 'int',
        'num_acknowledged': 'int',
        'num_resolved': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'name': 'name',
        'location': 'location',
        'min_offset': 'min_offset',
        'max_offset': 'max_offset',
        'min_time': 'min_time',
        'max_time': 'max_time',
        'partition_size': 'partition_size',
        'global_tags': 'global_tags',
        'comments': 'comments',
        'num_active': 'num_active',
        'num_invalid': 'num_invalid',
        'num_acknowledged': 'num_acknowledged',
        'num_resolved': 'num_resolved'
    }

    def __init__(self, id=None, created=None, name=None, location=None, min_offset=None, max_offset=None, min_time=None, max_time=None, partition_size=None, global_tags=None, comments=None, num_active=None, num_invalid=None, num_acknowledged=None, num_resolved=None):  # noqa: E501
        """Partition - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._name = None
        self._location = None
        self._min_offset = None
        self._max_offset = None
        self._min_time = None
        self._max_time = None
        self._partition_size = None
        self._global_tags = None
        self._comments = None
        self._num_active = None
        self._num_invalid = None
        self._num_acknowledged = None
        self._num_resolved = None
        self.discriminator = None
        self.id = id
        self.created = created
        self.name = name
        self.location = location
        if min_offset is not None:
            self.min_offset = min_offset
        if max_offset is not None:
            self.max_offset = max_offset
        if min_time is not None:
            self.min_time = min_time
        if max_time is not None:
            self.max_time = max_time
        if partition_size is not None:
            self.partition_size = partition_size
        if global_tags is not None:
            self.global_tags = global_tags
        if comments is not None:
            self.comments = comments
        self.num_active = num_active
        self.num_invalid = num_invalid
        self.num_acknowledged = num_acknowledged
        self.num_resolved = num_resolved

    @property
    def id(self):
        """Gets the id of this Partition.  # noqa: E501


        :return: The id of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Partition.


        :param id: The id of this Partition.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this Partition.  # noqa: E501


        :return: The created of this Partition.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Partition.


        :param created: The created of this Partition.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def name(self):
        """Gets the name of this Partition.  # noqa: E501


        :return: The name of this Partition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Partition.


        :param name: The name of this Partition.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this Partition.  # noqa: E501


        :return: The location of this Partition.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Partition.


        :param location: The location of this Partition.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def min_offset(self):
        """Gets the min_offset of this Partition.  # noqa: E501


        :return: The min_offset of this Partition.  # noqa: E501
        :rtype: float
        """
        return self._min_offset

    @min_offset.setter
    def min_offset(self, min_offset):
        """Sets the min_offset of this Partition.


        :param min_offset: The min_offset of this Partition.  # noqa: E501
        :type: float
        """

        self._min_offset = min_offset

    @property
    def max_offset(self):
        """Gets the max_offset of this Partition.  # noqa: E501


        :return: The max_offset of this Partition.  # noqa: E501
        :rtype: float
        """
        return self._max_offset

    @max_offset.setter
    def max_offset(self, max_offset):
        """Sets the max_offset of this Partition.


        :param max_offset: The max_offset of this Partition.  # noqa: E501
        :type: float
        """

        self._max_offset = max_offset

    @property
    def min_time(self):
        """Gets the min_time of this Partition.  # noqa: E501


        :return: The min_time of this Partition.  # noqa: E501
        :rtype: datetime
        """
        return self._min_time

    @min_time.setter
    def min_time(self, min_time):
        """Sets the min_time of this Partition.


        :param min_time: The min_time of this Partition.  # noqa: E501
        :type: datetime
        """

        self._min_time = min_time

    @property
    def max_time(self):
        """Gets the max_time of this Partition.  # noqa: E501


        :return: The max_time of this Partition.  # noqa: E501
        :rtype: datetime
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time):
        """Sets the max_time of this Partition.


        :param max_time: The max_time of this Partition.  # noqa: E501
        :type: datetime
        """

        self._max_time = max_time

    @property
    def partition_size(self):
        """Gets the partition_size of this Partition.  # noqa: E501


        :return: The partition_size of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._partition_size

    @partition_size.setter
    def partition_size(self, partition_size):
        """Sets the partition_size of this Partition.


        :param partition_size: The partition_size of this Partition.  # noqa: E501
        :type: int
        """

        self._partition_size = partition_size

    @property
    def global_tags(self):
        """Gets the global_tags of this Partition.  # noqa: E501


        :return: The global_tags of this Partition.  # noqa: E501
        :rtype: list[GlobalTag]
        """
        return self._global_tags

    @global_tags.setter
    def global_tags(self, global_tags):
        """Sets the global_tags of this Partition.


        :param global_tags: The global_tags of this Partition.  # noqa: E501
        :type: list[GlobalTag]
        """

        self._global_tags = global_tags

    @property
    def comments(self):
        """Gets the comments of this Partition.  # noqa: E501


        :return: The comments of this Partition.  # noqa: E501
        :rtype: list[Comment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Partition.


        :param comments: The comments of this Partition.  # noqa: E501
        :type: list[Comment]
        """

        self._comments = comments

    @property
    def num_active(self):
        """Gets the num_active of this Partition.  # noqa: E501


        :return: The num_active of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._num_active

    @num_active.setter
    def num_active(self, num_active):
        """Sets the num_active of this Partition.


        :param num_active: The num_active of this Partition.  # noqa: E501
        :type: int
        """
        if num_active is None:
            raise ValueError("Invalid value for `num_active`, must not be `None`")  # noqa: E501

        self._num_active = num_active

    @property
    def num_invalid(self):
        """Gets the num_invalid of this Partition.  # noqa: E501


        :return: The num_invalid of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._num_invalid

    @num_invalid.setter
    def num_invalid(self, num_invalid):
        """Sets the num_invalid of this Partition.


        :param num_invalid: The num_invalid of this Partition.  # noqa: E501
        :type: int
        """
        if num_invalid is None:
            raise ValueError("Invalid value for `num_invalid`, must not be `None`")  # noqa: E501

        self._num_invalid = num_invalid

    @property
    def num_acknowledged(self):
        """Gets the num_acknowledged of this Partition.  # noqa: E501


        :return: The num_acknowledged of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._num_acknowledged

    @num_acknowledged.setter
    def num_acknowledged(self, num_acknowledged):
        """Sets the num_acknowledged of this Partition.


        :param num_acknowledged: The num_acknowledged of this Partition.  # noqa: E501
        :type: int
        """
        if num_acknowledged is None:
            raise ValueError("Invalid value for `num_acknowledged`, must not be `None`")  # noqa: E501

        self._num_acknowledged = num_acknowledged

    @property
    def num_resolved(self):
        """Gets the num_resolved of this Partition.  # noqa: E501


        :return: The num_resolved of this Partition.  # noqa: E501
        :rtype: int
        """
        return self._num_resolved

    @num_resolved.setter
    def num_resolved(self, num_resolved):
        """Sets the num_resolved of this Partition.


        :param num_resolved: The num_resolved of this Partition.  # noqa: E501
        :type: int
        """
        if num_resolved is None:
            raise ValueError("Invalid value for `num_resolved`, must not be `None`")  # noqa: E501

        self._num_resolved = num_resolved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Partition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Partition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
