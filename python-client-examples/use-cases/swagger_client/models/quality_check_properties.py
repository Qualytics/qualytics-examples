# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QualityCheckProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref_datastore_id': 'int',
        'ref_container_id': 'int',
        'field_name': 'str',
        'field_type': 'FieldType',
        'min': 'float',
        'max': 'float',
        'inclusive_min': 'bool',
        'inclusive_max': 'bool',
        'inclusive': 'bool',
        'list': 'list[object]',
        'value': 'float',
        'pattern': 'str',
        '_datetime': 'datetime',
        'min_time': 'datetime',
        'max_time': 'datetime',
        'expression': 'str',
        'equation': 'str',
        'tolerance': 'float',
        'interval_name': 'str',
        'min_size': 'int',
        'max_size': 'int'
    }

    attribute_map = {
        'ref_datastore_id': 'ref_datastore_id',
        'ref_container_id': 'ref_container_id',
        'field_name': 'field_name',
        'field_type': 'field_type',
        'min': 'min',
        'max': 'max',
        'inclusive_min': 'inclusive_min',
        'inclusive_max': 'inclusive_max',
        'inclusive': 'inclusive',
        'list': 'list',
        'value': 'value',
        'pattern': 'pattern',
        '_datetime': 'datetime',
        'min_time': 'min_time',
        'max_time': 'max_time',
        'expression': 'expression',
        'equation': 'equation',
        'tolerance': 'tolerance',
        'interval_name': 'interval_name',
        'min_size': 'min_size',
        'max_size': 'max_size'
    }

    def __init__(self, ref_datastore_id=None, ref_container_id=None, field_name=None, field_type=None, min=None, max=None, inclusive_min=None, inclusive_max=None, inclusive=None, list=None, value=None, pattern=None, _datetime=None, min_time=None, max_time=None, expression=None, equation=None, tolerance=None, interval_name=None, min_size=None, max_size=None):  # noqa: E501
        """QualityCheckProperties - a model defined in Swagger"""  # noqa: E501
        self._ref_datastore_id = None
        self._ref_container_id = None
        self._field_name = None
        self._field_type = None
        self._min = None
        self._max = None
        self._inclusive_min = None
        self._inclusive_max = None
        self._inclusive = None
        self._list = None
        self._value = None
        self._pattern = None
        self.__datetime = None
        self._min_time = None
        self._max_time = None
        self._expression = None
        self._equation = None
        self._tolerance = None
        self._interval_name = None
        self._min_size = None
        self._max_size = None
        self.discriminator = None
        if ref_datastore_id is not None:
            self.ref_datastore_id = ref_datastore_id
        if ref_container_id is not None:
            self.ref_container_id = ref_container_id
        if field_name is not None:
            self.field_name = field_name
        if field_type is not None:
            self.field_type = field_type
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if inclusive_min is not None:
            self.inclusive_min = inclusive_min
        if inclusive_max is not None:
            self.inclusive_max = inclusive_max
        if inclusive is not None:
            self.inclusive = inclusive
        if list is not None:
            self.list = list
        if value is not None:
            self.value = value
        if pattern is not None:
            self.pattern = pattern
        if _datetime is not None:
            self._datetime = _datetime
        if min_time is not None:
            self.min_time = min_time
        if max_time is not None:
            self.max_time = max_time
        if expression is not None:
            self.expression = expression
        if equation is not None:
            self.equation = equation
        if tolerance is not None:
            self.tolerance = tolerance
        if interval_name is not None:
            self.interval_name = interval_name
        if min_size is not None:
            self.min_size = min_size
        if max_size is not None:
            self.max_size = max_size

    @property
    def ref_datastore_id(self):
        """Gets the ref_datastore_id of this QualityCheckProperties.  # noqa: E501


        :return: The ref_datastore_id of this QualityCheckProperties.  # noqa: E501
        :rtype: int
        """
        return self._ref_datastore_id

    @ref_datastore_id.setter
    def ref_datastore_id(self, ref_datastore_id):
        """Sets the ref_datastore_id of this QualityCheckProperties.


        :param ref_datastore_id: The ref_datastore_id of this QualityCheckProperties.  # noqa: E501
        :type: int
        """

        self._ref_datastore_id = ref_datastore_id

    @property
    def ref_container_id(self):
        """Gets the ref_container_id of this QualityCheckProperties.  # noqa: E501


        :return: The ref_container_id of this QualityCheckProperties.  # noqa: E501
        :rtype: int
        """
        return self._ref_container_id

    @ref_container_id.setter
    def ref_container_id(self, ref_container_id):
        """Sets the ref_container_id of this QualityCheckProperties.


        :param ref_container_id: The ref_container_id of this QualityCheckProperties.  # noqa: E501
        :type: int
        """

        self._ref_container_id = ref_container_id

    @property
    def field_name(self):
        """Gets the field_name of this QualityCheckProperties.  # noqa: E501


        :return: The field_name of this QualityCheckProperties.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this QualityCheckProperties.


        :param field_name: The field_name of this QualityCheckProperties.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def field_type(self):
        """Gets the field_type of this QualityCheckProperties.  # noqa: E501


        :return: The field_type of this QualityCheckProperties.  # noqa: E501
        :rtype: FieldType
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this QualityCheckProperties.


        :param field_type: The field_type of this QualityCheckProperties.  # noqa: E501
        :type: FieldType
        """

        self._field_type = field_type

    @property
    def min(self):
        """Gets the min of this QualityCheckProperties.  # noqa: E501


        :return: The min of this QualityCheckProperties.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this QualityCheckProperties.


        :param min: The min of this QualityCheckProperties.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this QualityCheckProperties.  # noqa: E501


        :return: The max of this QualityCheckProperties.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this QualityCheckProperties.


        :param max: The max of this QualityCheckProperties.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def inclusive_min(self):
        """Gets the inclusive_min of this QualityCheckProperties.  # noqa: E501


        :return: The inclusive_min of this QualityCheckProperties.  # noqa: E501
        :rtype: bool
        """
        return self._inclusive_min

    @inclusive_min.setter
    def inclusive_min(self, inclusive_min):
        """Sets the inclusive_min of this QualityCheckProperties.


        :param inclusive_min: The inclusive_min of this QualityCheckProperties.  # noqa: E501
        :type: bool
        """

        self._inclusive_min = inclusive_min

    @property
    def inclusive_max(self):
        """Gets the inclusive_max of this QualityCheckProperties.  # noqa: E501


        :return: The inclusive_max of this QualityCheckProperties.  # noqa: E501
        :rtype: bool
        """
        return self._inclusive_max

    @inclusive_max.setter
    def inclusive_max(self, inclusive_max):
        """Sets the inclusive_max of this QualityCheckProperties.


        :param inclusive_max: The inclusive_max of this QualityCheckProperties.  # noqa: E501
        :type: bool
        """

        self._inclusive_max = inclusive_max

    @property
    def inclusive(self):
        """Gets the inclusive of this QualityCheckProperties.  # noqa: E501


        :return: The inclusive of this QualityCheckProperties.  # noqa: E501
        :rtype: bool
        """
        return self._inclusive

    @inclusive.setter
    def inclusive(self, inclusive):
        """Sets the inclusive of this QualityCheckProperties.


        :param inclusive: The inclusive of this QualityCheckProperties.  # noqa: E501
        :type: bool
        """

        self._inclusive = inclusive

    @property
    def list(self):
        """Gets the list of this QualityCheckProperties.  # noqa: E501


        :return: The list of this QualityCheckProperties.  # noqa: E501
        :rtype: list[object]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this QualityCheckProperties.


        :param list: The list of this QualityCheckProperties.  # noqa: E501
        :type: list[object]
        """

        self._list = list

    @property
    def value(self):
        """Gets the value of this QualityCheckProperties.  # noqa: E501


        :return: The value of this QualityCheckProperties.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this QualityCheckProperties.


        :param value: The value of this QualityCheckProperties.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def pattern(self):
        """Gets the pattern of this QualityCheckProperties.  # noqa: E501


        :return: The pattern of this QualityCheckProperties.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this QualityCheckProperties.


        :param pattern: The pattern of this QualityCheckProperties.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def _datetime(self):
        """Gets the _datetime of this QualityCheckProperties.  # noqa: E501


        :return: The _datetime of this QualityCheckProperties.  # noqa: E501
        :rtype: datetime
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        """Sets the _datetime of this QualityCheckProperties.


        :param _datetime: The _datetime of this QualityCheckProperties.  # noqa: E501
        :type: datetime
        """

        self.__datetime = _datetime

    @property
    def min_time(self):
        """Gets the min_time of this QualityCheckProperties.  # noqa: E501


        :return: The min_time of this QualityCheckProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._min_time

    @min_time.setter
    def min_time(self, min_time):
        """Sets the min_time of this QualityCheckProperties.


        :param min_time: The min_time of this QualityCheckProperties.  # noqa: E501
        :type: datetime
        """

        self._min_time = min_time

    @property
    def max_time(self):
        """Gets the max_time of this QualityCheckProperties.  # noqa: E501


        :return: The max_time of this QualityCheckProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time):
        """Sets the max_time of this QualityCheckProperties.


        :param max_time: The max_time of this QualityCheckProperties.  # noqa: E501
        :type: datetime
        """

        self._max_time = max_time

    @property
    def expression(self):
        """Gets the expression of this QualityCheckProperties.  # noqa: E501


        :return: The expression of this QualityCheckProperties.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this QualityCheckProperties.


        :param expression: The expression of this QualityCheckProperties.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def equation(self):
        """Gets the equation of this QualityCheckProperties.  # noqa: E501


        :return: The equation of this QualityCheckProperties.  # noqa: E501
        :rtype: str
        """
        return self._equation

    @equation.setter
    def equation(self, equation):
        """Sets the equation of this QualityCheckProperties.


        :param equation: The equation of this QualityCheckProperties.  # noqa: E501
        :type: str
        """

        self._equation = equation

    @property
    def tolerance(self):
        """Gets the tolerance of this QualityCheckProperties.  # noqa: E501


        :return: The tolerance of this QualityCheckProperties.  # noqa: E501
        :rtype: float
        """
        return self._tolerance

    @tolerance.setter
    def tolerance(self, tolerance):
        """Sets the tolerance of this QualityCheckProperties.


        :param tolerance: The tolerance of this QualityCheckProperties.  # noqa: E501
        :type: float
        """

        self._tolerance = tolerance

    @property
    def interval_name(self):
        """Gets the interval_name of this QualityCheckProperties.  # noqa: E501


        :return: The interval_name of this QualityCheckProperties.  # noqa: E501
        :rtype: str
        """
        return self._interval_name

    @interval_name.setter
    def interval_name(self, interval_name):
        """Sets the interval_name of this QualityCheckProperties.


        :param interval_name: The interval_name of this QualityCheckProperties.  # noqa: E501
        :type: str
        """

        self._interval_name = interval_name

    @property
    def min_size(self):
        """Gets the min_size of this QualityCheckProperties.  # noqa: E501


        :return: The min_size of this QualityCheckProperties.  # noqa: E501
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this QualityCheckProperties.


        :param min_size: The min_size of this QualityCheckProperties.  # noqa: E501
        :type: int
        """

        self._min_size = min_size

    @property
    def max_size(self):
        """Gets the max_size of this QualityCheckProperties.  # noqa: E501


        :return: The max_size of this QualityCheckProperties.  # noqa: E501
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this QualityCheckProperties.


        :param max_size: The max_size of this QualityCheckProperties.  # noqa: E501
        :type: int
        """

        self._max_size = max_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualityCheckProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualityCheckProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
