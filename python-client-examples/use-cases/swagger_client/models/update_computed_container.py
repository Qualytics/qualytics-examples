# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateComputedContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_type': 'str',
        'exclude_fields': 'list[str]',
        'tags': 'list[str]',
        'name': 'str',
        'query': 'str'
    }

    attribute_map = {
        'store_type': 'store_type',
        'exclude_fields': 'exclude_fields',
        'tags': 'tags',
        'name': 'name',
        'query': 'query'
    }

    def __init__(self, store_type=None, exclude_fields=None, tags=None, name=None, query=None):  # noqa: E501
        """UpdateComputedContainer - a model defined in Swagger"""  # noqa: E501
        self._store_type = None
        self._exclude_fields = None
        self._tags = None
        self._name = None
        self._query = None
        self.discriminator = None
        self.store_type = store_type
        if exclude_fields is not None:
            self.exclude_fields = exclude_fields
        if tags is not None:
            self.tags = tags
        self.name = name
        self.query = query

    @property
    def store_type(self):
        """Gets the store_type of this UpdateComputedContainer.  # noqa: E501

        `Container` type  # noqa: E501

        :return: The store_type of this UpdateComputedContainer.  # noqa: E501
        :rtype: str
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type):
        """Sets the store_type of this UpdateComputedContainer.

        `Container` type  # noqa: E501

        :param store_type: The store_type of this UpdateComputedContainer.  # noqa: E501
        :type: str
        """
        if store_type is None:
            raise ValueError("Invalid value for `store_type`, must not be `None`")  # noqa: E501
        allowed_values = ["computed"]  # noqa: E501
        if store_type not in allowed_values:
            raise ValueError(
                "Invalid value for `store_type` ({0}), must be one of {1}"  # noqa: E501
                .format(store_type, allowed_values)
            )

        self._store_type = store_type

    @property
    def exclude_fields(self):
        """Gets the exclude_fields of this UpdateComputedContainer.  # noqa: E501


        :return: The exclude_fields of this UpdateComputedContainer.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_fields

    @exclude_fields.setter
    def exclude_fields(self, exclude_fields):
        """Sets the exclude_fields of this UpdateComputedContainer.


        :param exclude_fields: The exclude_fields of this UpdateComputedContainer.  # noqa: E501
        :type: list[str]
        """

        self._exclude_fields = exclude_fields

    @property
    def tags(self):
        """Gets the tags of this UpdateComputedContainer.  # noqa: E501


        :return: The tags of this UpdateComputedContainer.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateComputedContainer.


        :param tags: The tags of this UpdateComputedContainer.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def name(self):
        """Gets the name of this UpdateComputedContainer.  # noqa: E501

        `Container` name  # noqa: E501

        :return: The name of this UpdateComputedContainer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateComputedContainer.

        `Container` name  # noqa: E501

        :param name: The name of this UpdateComputedContainer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def query(self):
        """Gets the query of this UpdateComputedContainer.  # noqa: E501

        `Container` query  # noqa: E501

        :return: The query of this UpdateComputedContainer.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this UpdateComputedContainer.

        `Container` query  # noqa: E501

        :param query: The query of this UpdateComputedContainer.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateComputedContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateComputedContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
