# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateFileContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_type': 'str',
        'exclude_fields': 'list[str]',
        'tags': 'list[str]',
        'file_name': 'str',
        'freshness_tracking_enabled': 'bool',
        'escape_character': 'str'
    }

    attribute_map = {
        'store_type': 'store_type',
        'exclude_fields': 'exclude_fields',
        'tags': 'tags',
        'file_name': 'file_name',
        'freshness_tracking_enabled': 'freshness_tracking_enabled',
        'escape_character': 'escape_character'
    }

    def __init__(self, store_type=None, exclude_fields=None, tags=None, file_name=None, freshness_tracking_enabled=None, escape_character=None):  # noqa: E501
        """UpdateFileContainer - a model defined in Swagger"""  # noqa: E501
        self._store_type = None
        self._exclude_fields = None
        self._tags = None
        self._file_name = None
        self._freshness_tracking_enabled = None
        self._escape_character = None
        self.discriminator = None
        self.store_type = store_type
        if exclude_fields is not None:
            self.exclude_fields = exclude_fields
        if tags is not None:
            self.tags = tags
        if file_name is not None:
            self.file_name = file_name
        self.freshness_tracking_enabled = freshness_tracking_enabled
        if escape_character is not None:
            self.escape_character = escape_character

    @property
    def store_type(self):
        """Gets the store_type of this UpdateFileContainer.  # noqa: E501

        `Container` store type  # noqa: E501

        :return: The store_type of this UpdateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type):
        """Sets the store_type of this UpdateFileContainer.

        `Container` store type  # noqa: E501

        :param store_type: The store_type of this UpdateFileContainer.  # noqa: E501
        :type: str
        """
        if store_type is None:
            raise ValueError("Invalid value for `store_type`, must not be `None`")  # noqa: E501
        allowed_values = ["file"]  # noqa: E501
        if store_type not in allowed_values:
            raise ValueError(
                "Invalid value for `store_type` ({0}), must be one of {1}"  # noqa: E501
                .format(store_type, allowed_values)
            )

        self._store_type = store_type

    @property
    def exclude_fields(self):
        """Gets the exclude_fields of this UpdateFileContainer.  # noqa: E501


        :return: The exclude_fields of this UpdateFileContainer.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_fields

    @exclude_fields.setter
    def exclude_fields(self, exclude_fields):
        """Sets the exclude_fields of this UpdateFileContainer.


        :param exclude_fields: The exclude_fields of this UpdateFileContainer.  # noqa: E501
        :type: list[str]
        """

        self._exclude_fields = exclude_fields

    @property
    def tags(self):
        """Gets the tags of this UpdateFileContainer.  # noqa: E501


        :return: The tags of this UpdateFileContainer.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateFileContainer.


        :param tags: The tags of this UpdateFileContainer.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def file_name(self):
        """Gets the file_name of this UpdateFileContainer.  # noqa: E501

        `Container` file name  # noqa: E501

        :return: The file_name of this UpdateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this UpdateFileContainer.

        `Container` file name  # noqa: E501

        :param file_name: The file_name of this UpdateFileContainer.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def freshness_tracking_enabled(self):
        """Gets the freshness_tracking_enabled of this UpdateFileContainer.  # noqa: E501

        If `Container` freshness tracking mode enabled or not  # noqa: E501

        :return: The freshness_tracking_enabled of this UpdateFileContainer.  # noqa: E501
        :rtype: bool
        """
        return self._freshness_tracking_enabled

    @freshness_tracking_enabled.setter
    def freshness_tracking_enabled(self, freshness_tracking_enabled):
        """Sets the freshness_tracking_enabled of this UpdateFileContainer.

        If `Container` freshness tracking mode enabled or not  # noqa: E501

        :param freshness_tracking_enabled: The freshness_tracking_enabled of this UpdateFileContainer.  # noqa: E501
        :type: bool
        """
        if freshness_tracking_enabled is None:
            raise ValueError("Invalid value for `freshness_tracking_enabled`, must not be `None`")  # noqa: E501

        self._freshness_tracking_enabled = freshness_tracking_enabled

    @property
    def escape_character(self):
        """Gets the escape_character of this UpdateFileContainer.  # noqa: E501

        `Container` escape character  # noqa: E501

        :return: The escape_character of this UpdateFileContainer.  # noqa: E501
        :rtype: str
        """
        return self._escape_character

    @escape_character.setter
    def escape_character(self, escape_character):
        """Sets the escape_character of this UpdateFileContainer.

        `Container` escape character  # noqa: E501

        :param escape_character: The escape_character of this UpdateFileContainer.  # noqa: E501
        :type: str
        """
        allowed_values = ["\"", "\\"]  # noqa: E501
        if escape_character not in allowed_values:
            raise ValueError(
                "Invalid value for `escape_character` ({0}), must be one of {1}"  # noqa: E501
                .format(escape_character, allowed_values)
            )

        self._escape_character = escape_character

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateFileContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateFileContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
