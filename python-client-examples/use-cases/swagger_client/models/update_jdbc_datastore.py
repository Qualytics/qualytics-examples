# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateJdbcDatastore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'enrich_only': 'bool',
        'enrich_container_prefix': 'str',
        'tags': 'list[str]',
        'favorite': 'bool',
        'host': 'str',
        'port': 'int',
        'database': 'str',
        'schema': 'str',
        'username': 'str',
        'password': 'str',
        'parameters': 'dict(str, str)'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'enrich_only': 'enrich_only',
        'enrich_container_prefix': 'enrich_container_prefix',
        'tags': 'tags',
        'favorite': 'favorite',
        'host': 'host',
        'port': 'port',
        'database': 'database',
        'schema': 'schema',
        'username': 'username',
        'password': 'password',
        'parameters': 'parameters'
    }

    def __init__(self, type=None, name=None, enrich_only=None, enrich_container_prefix=None, tags=None, favorite=None, host=None, port=None, database=None, schema=None, username=None, password=None, parameters=None):  # noqa: E501
        """UpdateJdbcDatastore - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._enrich_only = None
        self._enrich_container_prefix = None
        self._tags = None
        self._favorite = None
        self._host = None
        self._port = None
        self._database = None
        self._schema = None
        self._username = None
        self._password = None
        self._parameters = None
        self.discriminator = None
        self.type = type
        self.name = name
        self.enrich_only = enrich_only
        self.enrich_container_prefix = enrich_container_prefix
        if tags is not None:
            self.tags = tags
        if favorite is not None:
            self.favorite = favorite
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if database is not None:
            self.database = database
        if schema is not None:
            self.schema = schema
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if parameters is not None:
            self.parameters = parameters

    @property
    def type(self):
        """Gets the type of this UpdateJdbcDatastore.  # noqa: E501

        Type of JDBC `Datastore`  # noqa: E501

        :return: The type of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateJdbcDatastore.

        Type of JDBC `Datastore`  # noqa: E501

        :param type: The type of this UpdateJdbcDatastore.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["postgresql", "mysql", "sqlserver", "oracle", "snowflake", "redshift", "bigquery", "databricks", "synapse", "mariadb"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this UpdateJdbcDatastore.  # noqa: E501

        Name of the `Datastore`  # noqa: E501

        :return: The name of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateJdbcDatastore.

        Name of the `Datastore`  # noqa: E501

        :param name: The name of this UpdateJdbcDatastore.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def enrich_only(self):
        """Gets the enrich_only of this UpdateJdbcDatastore.  # noqa: E501

        If is a `Datastore`=`false` or `Enrichment Datastore`=`true`  # noqa: E501

        :return: The enrich_only of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: bool
        """
        return self._enrich_only

    @enrich_only.setter
    def enrich_only(self, enrich_only):
        """Sets the enrich_only of this UpdateJdbcDatastore.

        If is a `Datastore`=`false` or `Enrichment Datastore`=`true`  # noqa: E501

        :param enrich_only: The enrich_only of this UpdateJdbcDatastore.  # noqa: E501
        :type: bool
        """
        if enrich_only is None:
            raise ValueError("Invalid value for `enrich_only`, must not be `None`")  # noqa: E501

        self._enrich_only = enrich_only

    @property
    def enrich_container_prefix(self):
        """Gets the enrich_container_prefix of this UpdateJdbcDatastore.  # noqa: E501

        The `Enrichment Datastore` prefix name  # noqa: E501

        :return: The enrich_container_prefix of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._enrich_container_prefix

    @enrich_container_prefix.setter
    def enrich_container_prefix(self, enrich_container_prefix):
        """Sets the enrich_container_prefix of this UpdateJdbcDatastore.

        The `Enrichment Datastore` prefix name  # noqa: E501

        :param enrich_container_prefix: The enrich_container_prefix of this UpdateJdbcDatastore.  # noqa: E501
        :type: str
        """
        if enrich_container_prefix is None:
            raise ValueError("Invalid value for `enrich_container_prefix`, must not be `None`")  # noqa: E501

        self._enrich_container_prefix = enrich_container_prefix

    @property
    def tags(self):
        """Gets the tags of this UpdateJdbcDatastore.  # noqa: E501

        The list of `Tags` of the `Datastore`  # noqa: E501

        :return: The tags of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateJdbcDatastore.

        The list of `Tags` of the `Datastore`  # noqa: E501

        :param tags: The tags of this UpdateJdbcDatastore.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def favorite(self):
        """Gets the favorite of this UpdateJdbcDatastore.  # noqa: E501

        If the `Datastore` is favorite or not  # noqa: E501

        :return: The favorite of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this UpdateJdbcDatastore.

        If the `Datastore` is favorite or not  # noqa: E501

        :param favorite: The favorite of this UpdateJdbcDatastore.  # noqa: E501
        :type: bool
        """

        self._favorite = favorite

    @property
    def host(self):
        """Gets the host of this UpdateJdbcDatastore.  # noqa: E501

        Host name of JDBC `Datastore`  # noqa: E501

        :return: The host of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this UpdateJdbcDatastore.

        Host name of JDBC `Datastore`  # noqa: E501

        :param host: The host of this UpdateJdbcDatastore.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this UpdateJdbcDatastore.  # noqa: E501

        Port number of JDBC `Datastore`  # noqa: E501

        :return: The port of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this UpdateJdbcDatastore.

        Port number of JDBC `Datastore`  # noqa: E501

        :param port: The port of this UpdateJdbcDatastore.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def database(self):
        """Gets the database of this UpdateJdbcDatastore.  # noqa: E501

        Database name of JDBC `Datastore`  # noqa: E501

        :return: The database of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this UpdateJdbcDatastore.

        Database name of JDBC `Datastore`  # noqa: E501

        :param database: The database of this UpdateJdbcDatastore.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def schema(self):
        """Gets the schema of this UpdateJdbcDatastore.  # noqa: E501

        Database schema name of JDBC `Datastore`  # noqa: E501

        :return: The schema of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this UpdateJdbcDatastore.

        Database schema name of JDBC `Datastore`  # noqa: E501

        :param schema: The schema of this UpdateJdbcDatastore.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def username(self):
        """Gets the username of this UpdateJdbcDatastore.  # noqa: E501

        Username that connects to JDBC `Datastore`  # noqa: E501

        :return: The username of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UpdateJdbcDatastore.

        Username that connects to JDBC `Datastore`  # noqa: E501

        :param username: The username of this UpdateJdbcDatastore.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this UpdateJdbcDatastore.  # noqa: E501

        Password of the user that connects to JDBC `Datastore`  # noqa: E501

        :return: The password of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateJdbcDatastore.

        Password of the user that connects to JDBC `Datastore`  # noqa: E501

        :param password: The password of this UpdateJdbcDatastore.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def parameters(self):
        """Gets the parameters of this UpdateJdbcDatastore.  # noqa: E501

        Connection Parameters of JDBC `Datastore`  # noqa: E501

        :return: The parameters of this UpdateJdbcDatastore.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this UpdateJdbcDatastore.

        Connection Parameters of JDBC `Datastore`  # noqa: E501

        :param parameters: The parameters of this UpdateJdbcDatastore.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateJdbcDatastore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateJdbcDatastore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
