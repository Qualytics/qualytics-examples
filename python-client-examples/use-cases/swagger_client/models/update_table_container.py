# coding: utf-8

"""
    Surveillance Hub

    Qualytics API  # noqa: E501

    OpenAPI spec version: 5ca80d8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTableContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_type': 'str',
        'exclude_fields': 'list[str]',
        'tags': 'list[str]',
        'freshness_tracking_enabled': 'bool',
        'partition_field': 'str',
        'row_identifier_field': 'str',
        'incremental_field_name': 'str',
        'incremental_identifier_type': 'str'
    }

    attribute_map = {
        'store_type': 'store_type',
        'exclude_fields': 'exclude_fields',
        'tags': 'tags',
        'freshness_tracking_enabled': 'freshness_tracking_enabled',
        'partition_field': 'partition_field',
        'row_identifier_field': 'row_identifier_field',
        'incremental_field_name': 'incremental_field_name',
        'incremental_identifier_type': 'incremental_identifier_type'
    }

    def __init__(self, store_type=None, exclude_fields=None, tags=None, freshness_tracking_enabled=None, partition_field=None, row_identifier_field=None, incremental_field_name=None, incremental_identifier_type=None):  # noqa: E501
        """UpdateTableContainer - a model defined in Swagger"""  # noqa: E501
        self._store_type = None
        self._exclude_fields = None
        self._tags = None
        self._freshness_tracking_enabled = None
        self._partition_field = None
        self._row_identifier_field = None
        self._incremental_field_name = None
        self._incremental_identifier_type = None
        self.discriminator = None
        self.store_type = store_type
        if exclude_fields is not None:
            self.exclude_fields = exclude_fields
        if tags is not None:
            self.tags = tags
        self.freshness_tracking_enabled = freshness_tracking_enabled
        if partition_field is not None:
            self.partition_field = partition_field
        if row_identifier_field is not None:
            self.row_identifier_field = row_identifier_field
        if incremental_field_name is not None:
            self.incremental_field_name = incremental_field_name
        if incremental_identifier_type is not None:
            self.incremental_identifier_type = incremental_identifier_type

    @property
    def store_type(self):
        """Gets the store_type of this UpdateTableContainer.  # noqa: E501

        `Container` type  # noqa: E501

        :return: The store_type of this UpdateTableContainer.  # noqa: E501
        :rtype: str
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type):
        """Sets the store_type of this UpdateTableContainer.

        `Container` type  # noqa: E501

        :param store_type: The store_type of this UpdateTableContainer.  # noqa: E501
        :type: str
        """
        if store_type is None:
            raise ValueError("Invalid value for `store_type`, must not be `None`")  # noqa: E501
        allowed_values = ["table"]  # noqa: E501
        if store_type not in allowed_values:
            raise ValueError(
                "Invalid value for `store_type` ({0}), must be one of {1}"  # noqa: E501
                .format(store_type, allowed_values)
            )

        self._store_type = store_type

    @property
    def exclude_fields(self):
        """Gets the exclude_fields of this UpdateTableContainer.  # noqa: E501


        :return: The exclude_fields of this UpdateTableContainer.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_fields

    @exclude_fields.setter
    def exclude_fields(self, exclude_fields):
        """Sets the exclude_fields of this UpdateTableContainer.


        :param exclude_fields: The exclude_fields of this UpdateTableContainer.  # noqa: E501
        :type: list[str]
        """

        self._exclude_fields = exclude_fields

    @property
    def tags(self):
        """Gets the tags of this UpdateTableContainer.  # noqa: E501


        :return: The tags of this UpdateTableContainer.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateTableContainer.


        :param tags: The tags of this UpdateTableContainer.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def freshness_tracking_enabled(self):
        """Gets the freshness_tracking_enabled of this UpdateTableContainer.  # noqa: E501

        If `Container` freshness tacking mode is enabled or not  # noqa: E501

        :return: The freshness_tracking_enabled of this UpdateTableContainer.  # noqa: E501
        :rtype: bool
        """
        return self._freshness_tracking_enabled

    @freshness_tracking_enabled.setter
    def freshness_tracking_enabled(self, freshness_tracking_enabled):
        """Sets the freshness_tracking_enabled of this UpdateTableContainer.

        If `Container` freshness tacking mode is enabled or not  # noqa: E501

        :param freshness_tracking_enabled: The freshness_tracking_enabled of this UpdateTableContainer.  # noqa: E501
        :type: bool
        """
        if freshness_tracking_enabled is None:
            raise ValueError("Invalid value for `freshness_tracking_enabled`, must not be `None`")  # noqa: E501

        self._freshness_tracking_enabled = freshness_tracking_enabled

    @property
    def partition_field(self):
        """Gets the partition_field of this UpdateTableContainer.  # noqa: E501

        `Container` partition field  # noqa: E501

        :return: The partition_field of this UpdateTableContainer.  # noqa: E501
        :rtype: str
        """
        return self._partition_field

    @partition_field.setter
    def partition_field(self, partition_field):
        """Sets the partition_field of this UpdateTableContainer.

        `Container` partition field  # noqa: E501

        :param partition_field: The partition_field of this UpdateTableContainer.  # noqa: E501
        :type: str
        """

        self._partition_field = partition_field

    @property
    def row_identifier_field(self):
        """Gets the row_identifier_field of this UpdateTableContainer.  # noqa: E501

        `Container` row identifier field  # noqa: E501

        :return: The row_identifier_field of this UpdateTableContainer.  # noqa: E501
        :rtype: str
        """
        return self._row_identifier_field

    @row_identifier_field.setter
    def row_identifier_field(self, row_identifier_field):
        """Sets the row_identifier_field of this UpdateTableContainer.

        `Container` row identifier field  # noqa: E501

        :param row_identifier_field: The row_identifier_field of this UpdateTableContainer.  # noqa: E501
        :type: str
        """

        self._row_identifier_field = row_identifier_field

    @property
    def incremental_field_name(self):
        """Gets the incremental_field_name of this UpdateTableContainer.  # noqa: E501

        `Container` incremental field name  # noqa: E501

        :return: The incremental_field_name of this UpdateTableContainer.  # noqa: E501
        :rtype: str
        """
        return self._incremental_field_name

    @incremental_field_name.setter
    def incremental_field_name(self, incremental_field_name):
        """Sets the incremental_field_name of this UpdateTableContainer.

        `Container` incremental field name  # noqa: E501

        :param incremental_field_name: The incremental_field_name of this UpdateTableContainer.  # noqa: E501
        :type: str
        """

        self._incremental_field_name = incremental_field_name

    @property
    def incremental_identifier_type(self):
        """Gets the incremental_identifier_type of this UpdateTableContainer.  # noqa: E501

        `Container` incremental identifier type  # noqa: E501

        :return: The incremental_identifier_type of this UpdateTableContainer.  # noqa: E501
        :rtype: str
        """
        return self._incremental_identifier_type

    @incremental_identifier_type.setter
    def incremental_identifier_type(self, incremental_identifier_type):
        """Sets the incremental_identifier_type of this UpdateTableContainer.

        `Container` incremental identifier type  # noqa: E501

        :param incremental_identifier_type: The incremental_identifier_type of this UpdateTableContainer.  # noqa: E501
        :type: str
        """
        allowed_values = ["last-modified", "batch-value", "postgresql"]  # noqa: E501
        if incremental_identifier_type not in allowed_values:
            raise ValueError(
                "Invalid value for `incremental_identifier_type` ({0}), must be one of {1}"  # noqa: E501
                .format(incremental_identifier_type, allowed_values)
            )

        self._incremental_identifier_type = incremental_identifier_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTableContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTableContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
